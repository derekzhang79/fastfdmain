#include "w_bt_dish_kitchen_dish.h"
#include "ui_w_bt_dish_kitchen_dish.h"
#include "lds_query.h"
#include <QSqlError>
#include <QtDebug>
#include "lds_query.h"
#include "backheader.h"
#include "lds_tableview_delegate_check.h"
#include "w_bt_dish_kitchen_dish_plan.h"
#include "w_bt_dish_kitchenprinter.h"
#include "lds_messagebox.h"
#include "ui_w_bt_dish_kitchen_dish_more.h"
#include <QSqlDatabase>
#include "printer_pos.h"
#include "wxmanager.h"
#include "n_func.h"
#include "public_printby_ch_billno.h"
#include "w_bt_dish.h"
#include "fexpandmain_2.h"
#include "commonheader.h"
#include "printer_pos_vidpid.h"
#include "printer_pos_net.h"
#include "w_bt_dish.h"
#include "ldslight.h"
#include "getfilepath.h"
#include "fexpandmain_model_sqltablemodel.h"
#include "lds_model_sqltablemodel_delegate_com.h"
#include "printer_normal.h"
#include "w_bt_dish_kitchen_dish_state.h"
#include "w_sys_manage_cloudsync_rb_order.h"


///1. 厨打轮询只轮询当前
w_bt_dish_kitchen_dish::w_bt_dish_kitchen_dish(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::w_bt_dish_kitchen_dish)
{
    ui->setupUi(this);
    //! treewidget
    ui->treeWidget->header()->hide();
    ui->treeWidget->setEditTriggers(QAbstractItemView::NoEditTriggers);
    ui->treeWidget->setColumnCount(1);
    ///taleview
    tablemodel = new lds_model_sqltablemodel(this);
    tablemodel->setTable("cey_bt_dish");
    tablemodel->setEditStrategy(QSqlTableModel::OnManualSubmit);
    tablemodel->save_set_header("ch_dishno", tr("品码"));
    tablemodel->save_set_header("vch_dishname", tr("品名"));
    tablemodel->save_set_header("ch_kitchen_print_flag", tr("是否厨打"), true);
    tablemodel->save_set_header("vch_kitchen_print_id1", tr("厨打方案1"), true);
    tablemodel->save_set_header("vch_kitchen_print_id2", tr("厨打方案2"), true);
    tablemodel->save_set_header("vch_kitchen_print_id3", tr("厨打方案3"), true);

    tablemodel->save_set_header("ch_kitchen_out_flag", tr("是否出品"), true);
    tablemodel->save_set_header("vch_kitchen_out_id1", tr("出品方案1"), true);
    tablemodel->save_set_header("vch_kitchen_out_id2", tr("出品方案2"), true);
    tablemodel->save_set_header("vch_kitchen_out_id3", tr("出品方案3"), true);


    ui->tableView->setEditTriggers(QTableView::AllEditTriggers);
    ui->tableView->setModel(tablemodel);
    ui->tableView->showColumns(QList<int>() << tablemodel->fieldIndex("ch_dishno")<< tablemodel->fieldIndex("vch_dishname")
                               << tablemodel->fieldIndex("ch_kitchen_print_flag")
                               << tablemodel->fieldIndex("vch_kitchen_print_id1")
                               << tablemodel->fieldIndex("vch_kitchen_print_id2")
                               << tablemodel->fieldIndex("vch_kitchen_print_id3")

                               << tablemodel->fieldIndex("ch_kitchen_out_flag")
                               << tablemodel->fieldIndex("vch_kitchen_out_id1")
                               << tablemodel->fieldIndex("vch_kitchen_out_id2")
                               << tablemodel->fieldIndex("vch_kitchen_out_id3")
                               );
    tablemodel->tablename_kvmap_insert("cey_bt_kitchen_plan", "vch_plan_id", "vch_plan_name", "", true, lds_model_sqltablemodel::SELECT_AUTO_REFRESH_KEY);

    lds_model_sqltablemodel_delegate_com *d = new lds_model_sqltablemodel_delegate_com(this, tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));

    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("ch_kitchen_print_flag"), new lds_tableview_delegate_check(QVector<int>() << tablemodel->fieldIndex("ch_kitchen_print_flag"), ui->tableView, true));
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_print_id1"), d);
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_print_id2"), d);
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_print_id3"), d);

    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("ch_kitchen_out_flag"), new lds_tableview_delegate_check(QVector<int>() << tablemodel->fieldIndex("ch_kitchen_out_flag"), ui->tableView, true));
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_out_id1"), d);
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_out_id2"), d);
    ui->tableView->setItemDelegateForColumn(tablemodel->fieldIndex("vch_kitchen_out_id3"), d);

    //! toolbar
    ui->widget->setup(QStringList()
                      << tr("打印机管理")
                      << tr("厨打方案") << tr("批处理") << tr("厨打参数")
                      << tr("保存") << tr("退出")
                      );

    connect(ui->treeWidget,SIGNAL(pressed(QModelIndex)),this,SLOT(treeselect()));
    connect(ui->widget->index_widget(tr("退出")), SIGNAL(clicked()),this,SLOT(toexit()));
    connect(ui->widget->index_widget(tr("厨打方案")), SIGNAL(clicked()),this,SLOT(tokitchenplan()));
    connect(ui->widget->index_widget(tr("打印机管理")), SIGNAL(clicked()),this,SLOT(toprintset()));
    connect(ui->widget->index_widget(tr("批处理")), SIGNAL(clicked()),this,SLOT(tomore()));
    connect(ui->widget->index_widget(tr("保存")), SIGNAL(clicked()),this,SLOT(tosave()));
    connect(ui->widget->index_widget(tr("厨打参数")), SIGNAL(clicked()),this,SLOT(tokitchenparam()));

}

w_bt_dish_kitchen_dish::~w_bt_dish_kitchen_dish()
{
    delete ui;
}

void w_bt_dish_kitchen_dish::refresh()
{
    QTimer::singleShot(0, this, SLOT(torefresh()));
}

void w_bt_dish_kitchen_dish::torefresh()
{
    ///treewidget
    lds_query query;
    ui->treeWidget->deleteAllItem();
    ui->treeWidget->rootitem = new QTreeWidgetItem(QStringList()
                                                   <<tr("全部类型"));
    ui->treeWidget->addTopLevelItem(ui->treeWidget->rootitem);

    query.exec(
                "select  concat(vch_dish_typename,'[',ch_dish_typeno,']')     as 'nametype', ch_dish_typeno  from cey_bt_dish_type"
                );
    while(query.next()){
        QTreeWidgetItem *item = new QTreeWidgetItem(QStringList()
                                                    << query.record().value("nametype").toString()
                                                    );
        ui->treeWidget->rootitem->addChild(item);
        //获取[]的内容
        lds_query query_1;
        QString no=query.record().value("nametype").toString();
        no=no.split("[")[1];
        no.chop(1);
        query_1.exec(QString(
                         "select concat(vch_sub_typename,'[',ch_sub_typeno,']') as 'nametype' from cey_bt_dish_subtype where ch_dish_typeno = '%1' order by ch_sub_typeno asc;"
                         )
                     .arg(no)
                     );
        while(query_1.next()){
            QTreeWidgetItem *item1=new QTreeWidgetItem(QStringList()
                                                       <<query_1.record().value("nametype").toString()
                                                       );
            item->addChild(item1);
        }
    }
    ui->treeWidget->setItemSizeHint();//更新所有的 item的sizehint
    ui->treeWidget->restore();
    ///tableview
    tablemodel->select();
    ui->tableView->restore();
    if(tablemodel->rowCount() > 0){
        ui->tableView->resizeColumnsToContents();
    }
}

void w_bt_dish_kitchen_dish::treeselect()
{
    if(0 > checkDirty()) {//取消或操作失败
        ui->treeWidget->select_beforerow();
        return;
    }

    QString sqlselect;
    //tree检索
    if(ui->treeWidget->currentItem()){
        int index=ui->treeWidget->deepofitem(ui->treeWidget->currentItem());
        if(index>0){
            sqlselect=backheader::getinterdata(ui->treeWidget->currentItem()->text(0));
            if(index==1){
                sqlselect=QString("cey_bt_dish.ch_dish_typeno='%1'").arg(sqlselect);
            } else if(index==2){
                sqlselect=QString("cey_bt_dish.ch_sub_typeno='%1'").arg(sqlselect);
            }
        }
    }
    if(sqlselect.isEmpty()){

    } else {
        sqlselect +=" and ";
    }
    //是否停用
    sqlselect += " cey_bt_dish.ch_stopflag <> 'Y' ";
    //检索
    tablemodel->setFilter(sqlselect);
    ui->tableView->restore();
}

void w_bt_dish_kitchen_dish::toexit()
{
    if(0 <= checkDirty()) {//不保存 保存成功
        this->reject();
    }
}

void w_bt_dish_kitchen_dish::tokitchenplan()
{
    if(0 > checkDirty()) return;//取消或操作失败

    w_bt_dish_kitchen_dish_plan dialog(this);
    lds::setwflagFrameless(&dialog);
    dialog.setWindowTitle(_TITLE0(this));
    dialog.move(0,0);
    dialog.setFixedSize(lds::MAIN_WINDOW_SIZE);
    dialog.exec();
    torefresh();
}

void w_bt_dish_kitchen_dish::toprintset()
{
    w_bt_dish_Kitchenprinter_printermanager dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_bt_dish_kitchen_dish::tomore()
{
    if(0 > checkDirty()) return;//取消或操作失败

    QString desc, sqlselect;
    if(ui->treeWidget->currentItem()){
        int index=ui->treeWidget->deepofitem(ui->treeWidget->currentItem());
        if(index>0){
            sqlselect=backheader::getinterdata(ui->treeWidget->currentItem()->text(0));
            if(index==1){
                desc = tr("大类编号") + ":" + sqlselect;
            } else if(index==2){
                desc = tr("小类编号") + ":" + sqlselect;
            }
        }
    }

    w_bt_dish_kitchen_dish_more dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    dialog.setDesc(desc);
    lds_roundeddialog_rect_align(&dialog).exec();

}

void w_bt_dish_kitchen_dish::tosave()
{
    if(saveData()) {
        this->accept();
    }
}

void w_bt_dish_kitchen_dish::tokitchenparam()
{
    w_bt_dish_kitchen_dish_param dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

bool w_bt_dish_kitchen_dish::saveData()
{
    if(tablemodel->submitAll()){
        lds_messagebox::information(this, tr("提示"),tr("保存成功"));
        return true;
    }
    //错误提示
    lds_messagebox::warning(this, tr("提示"),tr("数据库错误")+"\n"+tablemodel->lastError().text());
    return false;
}

//-1 取消/操作失败 0 不保存 1 保存成功
int w_bt_dish_kitchen_dish::checkDirty()
{
    if(tablemodel->model_is_dirty()){
        switch(lds_messagebox::question(this, tr("提示"),tr("有数据未保存,确认保存?"), tr("保存"),tr("不保存"),tr("取消"))){
        case 0:
            if(!saveData()){
                return -1;//操作失败
            }
            return 1;//保存成功
        case 1:
            return 0;//不保存
        case 2:
            return -1;//取消
        }
    }
    return 1;//保存成功
}

/////////////////////////////////////////
w_bt_dish_kitchen_dish_more::w_bt_dish_kitchen_dish_more(w_bt_dish_kitchen_dish *parent)
    : QDialog(parent) ,ui( new Ui_w_bt_dish_kitchen_dish_more),_parent(parent)
{
    ui->setupUi(this);


    ///
    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_print_id1, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));
    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_print_id2, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));
    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_print_id3, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));

    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_out_id1, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));
    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_out_id2, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));
    lds_model_sqltablemodel_d::fillData(ui->comboBox_vch_kitchen_out_id3, _parent->tablemodel->tablename_kvmap_d("cey_bt_kitchen_plan"));

    ///
    connect(ui->pushButton_cancel,SIGNAL(clicked()),this,SLOT(tocancel()));
    connect(ui->pushButton_ok,SIGNAL(clicked()),this,SLOT(took()));

}

w_bt_dish_kitchen_dish_more::~w_bt_dish_kitchen_dish_more()
{
    delete ui;
}

void w_bt_dish_kitchen_dish_more::setDesc(const QString &desc)
{
    ui->label_desc->setText(desc);
}

void w_bt_dish_kitchen_dish_more::took()
{
    for(int row = 0, rowcount = _parent->tablemodel->rowCount(); row < rowcount; row++){
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("ch_kitchen_print_flag"), ui->checkBox_ch_kitchen_print_flag->isChecked()? "Y":"N");
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_print_id1"), ui->comboBox_vch_kitchen_print_id1->comusrdata().toString());
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_print_id2"), ui->comboBox_vch_kitchen_print_id2->comusrdata().toString());
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_print_id3"), ui->comboBox_vch_kitchen_print_id3->comusrdata().toString());

        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("ch_kitchen_out_flag"), ui->checkBox_ch_kitchen_out_flag->isChecked()? "Y":"N");
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_out_id1"), ui->comboBox_vch_kitchen_out_id1->comusrdata().toString());
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_out_id2"), ui->comboBox_vch_kitchen_out_id2->comusrdata().toString());
        _parent->tablemodel->model_data_set(row, _parent->tablemodel->fieldIndex("vch_kitchen_out_id3"), ui->comboBox_vch_kitchen_out_id3->comusrdata().toString());
    }
    this->accept();
}

void w_bt_dish_kitchen_dish_more::tocancel()
{
    this->reject();
}


void w_bt_dish_kitchen_dish_more::fillData_1(QComboBox *com, const QMap<QString, QVariant> *map)
{
    //    com->addItem("", "");
    for(QMap<QString, QVariant>::const_iterator itr = map->begin(); itr != map->end(); itr ++ ){
        com->addItem(itr.value().toString(), itr.key());
    }
}

int BoxPrintIndex::getIndex(const QString &ch_billno, const QString &vch_print_id, const QString &vch_plan_id, int int_dish_type, const QString &ch_dish_typeno, const QString &ch_sub_typeno, QString &int_indexbox_desc)
{
    lds_query query;
    QString key = QString("%1_%2_%3_%4").arg(ch_billno).arg(vch_print_id).arg(int_dish_type).arg(vch_plan_id);
    int idx = keyIdxMap.count();

    switch (int_dish_type) {
    case 0://一桌一单0
        break;
    case 1://一大类一单1
        key += "_"+ch_dish_typeno;
        query.exec(QString("select vch_dish_typename from cey_bt_dish_type where ch_dish_typeno = '%1' ").arg(ch_dish_typeno));
        query.next();
        int_indexbox_desc = query.record().value(0).toString();
        break;
    case 2://一小类一单2
        key += "_"+ch_sub_typeno;
        query.exec(QString("select vch_sub_typename from cey_bt_dish_subtype where ch_sub_typeno = '%1' ").arg(ch_sub_typeno));
        query.next();
        int_indexbox_desc = query.record().value(0).toString();
        break;
    case 3://一菜一单3
        key += "_"+QString::number(idx);
        break;
    }

    if(keyIdxMap.find(key) == keyIdxMap.end()) {
        keyIdxMap.insert(key, idx);
    }

    return keyIdxMap.value(key);
}


//当有立刻有新的厨打单发送过来，判断是，当前菜品正在厨打
w_bt_dish_kitchen_dish_thread_event::w_bt_dish_kitchen_dish_thread_event(QObject *parent )
    : QObject(parent)
{
}

w_bt_dish_kitchen_dish_thread_event::~w_bt_dish_kitchen_dish_thread_event()
{

}

void w_bt_dish_kitchen_dish_thread_event::tokitchen(QObject *parent, const QString &ch_billno)
{
    emit signal_busy(true);

    tablemodel.tablename_kvmap_clear_for_select_and_autoselect();
    print_open_fail_clear();

    for(int state =  w_bt_dish::KITCHEN_MIN_DEF; state < w_bt_dish::KITCHEN_MAX; state ++) {
        if(state == w_bt_dish::KITCHEN_FINISH) continue;
        if(state == w_bt_dish::KITCHEN_VOID) continue;

        {
            lds_query_db query(lds_thread::getThreadDbAndcreatdb());
            kitchen_key(parent, query, ch_billno, w_bt_dish::k2o3_stae2hex_str(w_bt_dish::kitchenState(state)));
        }
        {
            //二维码点餐
            lds_query_db query(w_sys_manage_cloudsync_rb_order::create_database());
            kitchen_key(parent, query, ch_billno, w_bt_dish::k2o3_stae2hex_str(w_bt_dish::kitchenState(state)));
        }
    }
    //    w_bt_dish_kitchen_dish_state::kitchen_data_adjust_dbtrans();



    emit signal_busy(false);
}

void w_bt_dish_kitchen_dish_thread_event::kitchen_key(QObject *parent, lds_query_db &query, const QString &ch_billno, const QString &key)
{
    //
    if(!QSqlDatabase::connectionNames().contains("w_bt_dish_kitchen_dish_thread_event")){
        QSqlDatabase tmpdb = QSqlDatabase::addDatabase("QSQLITE", "w_bt_dish_kitchen_dish_thread_event");
        tmpdb.setDatabaseName(":memory:");
    }
    QSqlDatabase db_local = QSqlDatabase::database("w_bt_dish_kitchen_dish_thread_event");
    lds_query_db query_local(db_local);
    const w_bt_dish::kitchenState key_state = (w_bt_dish::kitchenState)key.toInt(0, 16);
    //
    query_local.exec("create table if not exists table_kitchen ("
                     "int_flowid int(11),"
                     "int_kitchen_section int(1),"//0 1 2 3 4 5 6
                     "int_print_id char(2) ,"
                     "vch_unitname char(60),"
                     "vch_dishname char(60),"

                     "ch_suitflag char(1),"
                     "num_num decimal(12, 2),"
                     "num_price decimal(12, 2),"
                     "int_indexbox int(3),"///0-999 用于区别打印顺序
                     "vch_indexbox_desc char(60),"//大类小类名称
                     "ch_printflag char(1),"

                     "ch_billno char(15),"
                     "ch_tableno  char(18),"//4 + 12 + 2
                     "dt_operdate datetime,"
                     "int_person int(11),"
                     "vch_operid char(6),"

                     "ch_presentflag char(1),"
                     "vch_print_memo	char(60),"
                     "vch_plan_id char(2),"
                     "num_price_add decimal(12, 2)"
                     ")");
    query_local.exec(" delete from table_kitchen");


    /// 打印机编号 cey_u_orderdish的厨打序号及时更新
    /// 一次只打印一个单号的
    ///最后排序已打印id(int_print_id)和分组序号已为标准(int_indexbox)\vch_indexbox_desc里记录大类等信息
    ///
    QStringList ch_billno_list;
    BoxPrintIndex indexbox;
    QString ch_areaNo_table;
    QString ch_tableno;
    int int_person = f_get_from_cey_u_table(ch_billno, "int_person").toInt();

    if(w_bt_dish::KITCHEN_QUIT == key_state) {
        query.exec("SELECT a.ch_billno FROM cey_u_orderdish a, cey_u_orderdish_log e        where a.int_flowid = e.int_orderflow   and e.vch_plan_k3o3_state <> '111111' and e.vch_plan_k3o3_state like '%"+key+"%' group by a.ch_billno;");
    } else {
        query.exec("SELECT a.ch_billno FROM cey_u_orderdish a, cey_u_orderdish_print_tr e   where a.int_flowid = e.int_orderflow   and e.vch_plan_k3o3_state <> '111111' and e.vch_plan_k3o3_state like '%"+key+"%' group by a.ch_billno;");
    }
    while(query.next()) ch_billno_list << query.record().value(0).toString();


    foreach(const QString &ch_billno, ch_billno_list) {
        query.exec(QString(" select ch_tableno from cey_u_orderdish where ch_billno = '%1' ")
                   .arg(ch_billno));
        query.next();
        ch_tableno = query.record().value("ch_tableno").toString();

        ch_areaNo_table = f_get_from_cey_bt_table(ch_tableno, "ch_areano").toString();
        //快餐下，Q000， 中餐下ch_tableno
        if(w_bt_dish::KITCHEN_QUIT == key_state) {
            query.exec(
                        "select a.vch_plan_k3o3_id,a.ch_suitflag,a.int_flowid,a.num_num,a.num_back,a.num_price, a.ch_billno,a.ch_tableno,a.dt_operdate,a.vch_operid,a.ch_presentflag,"
                        /**
                                                                                                                                                                                                                 * 不同*/   "0-e.num_price_add as num_price_add, e.vch_print_memo, 0-e.num_back_cur as dish_num, "
                                                                                                                                                                                                                          "e.vch_plan_k3o3_state,  a.ch_dishno, a.ch_tableno  from cey_u_orderdish a  ,"
                        /**
                                                                                                                                                                                                                 * 不同*/"cey_u_orderdish_log e         "
                                                                                                                                                                                                                       "where a.dt_operdate >= " + query.curdatestr()+" and "
                                                                                                                                                                                                                                                                      "e.int_orderflow = a.int_flowid and e.vch_plan_k3o3_state like '%"+key+"%' and a.ch_billno = '"+ch_billno+"' ;");

        } else {
            query.exec(
                        "select a.vch_plan_k3o3_id,a.ch_suitflag,a.int_flowid,a.num_num,a.num_back,a.num_price, a.ch_billno,a.ch_tableno,a.dt_operdate,a.vch_operid,a.ch_presentflag,"
                        /**
                                                                                                                                                                                                                 * 不同*/   "a.num_price_add,a.vch_print_memo, a.num_num - a.num_back as dish_num,"
                                                                                                                                                                                                                          "e.vch_plan_k3o3_state,  a.ch_dishno, a.ch_tableno  from cey_u_orderdish a  ,"
                        /**
                                                                                                                                                                                                                 * 不同*/ "cey_u_orderdish_print_tr e  "
                                                                                                                                                                                                                        "where a.dt_operdate >= " + query.curdatestr()+" and "
                                                                                                                                                                                                                                                                       "e.int_orderflow = a.int_flowid and e.vch_plan_k3o3_state like '%"+key+"%' and a.ch_billno = '"+ch_billno+"' ;");
        }
        qDebug() << query.lastQuery();

        //
        while(query.next()) {
            QString vch_plan_k3o3_state = query.record().value("vch_plan_k3o3_state").toString();
            QString vch_plan_k3o3_id = query.record().value("vch_plan_k3o3_id").toString();
            QString ch_dishno = query.record().value("ch_dishno").toString();

            //有6列， 每列的符合key的完成厨打
            for(int index = 0, count = vch_plan_k3o3_state.count(); index < count; index++) {
                //2是未配置厨打， 1已经厨打完毕，0未厨打
                if(vch_plan_k3o3_state.mid(index, 1) == key) {//未厨打
                    QString vch_plan_id = vch_plan_k3o3_id.mid(index*2, 2);
                    if(vch_plan_id.toInt() >= 10) {//厨打方案的编号不能小于10
                        QVariant int_suit_type = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_suit_type");
                        if(false == int_suit_type.isValid()) continue;//没有找到用方案
                        char ch_printflag = 'Y';
                        QString ch_suitflag = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "ch_suitflag").toString();
                        switch(int_suit_type.toInt()) {//打印在一起0 只打印主套菜1 只打印套菜明细2
                        case 0://打印在一起0
                            break;
                        case 1://只打印主套菜1
                            if(ch_suitflag == "Y") {//子套菜不打
                                ch_printflag = 'N';
                            }
                            break;
                        case 2://只打印套菜明细2
                            if(ch_suitflag == "P") {//主套菜不打
                                ch_printflag = 'N';
                            }
                            break;
                        }
                        QString vch_indexbox_desc;
                        int int_indexbox = indexbox.getIndex(ch_billno,
                                                             f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id").toString(),
                                                             vch_plan_id,
                                                             f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_dish_type").toInt(),
                                                             f_get_from_cey_bt_dish(ch_dishno, "ch_dish_typeno").toString(),
                                                             f_get_from_cey_bt_dish(ch_dishno, "ch_sub_typeno").toString(),
                                                             vch_indexbox_desc);
                        query_local.exec(QString("insert into table_kitchen(int_flowid ,int_kitchen_section ,int_print_id , vch_unitname, vch_dishname ,ch_suitflag, num_num, num_price, int_indexbox,vch_indexbox_desc, ch_printflag,ch_billno, ch_tableno, dt_operdate, int_person, vch_operid,ch_presentflag,vch_print_memo,vch_plan_id, num_price_add) values ('%1','%2','%3','%4','%5',  '%6','%7','%8','%9','%10','%11','%12','%13','%14','%15','%16','%17','%18', '%19', '%20'  )")
                                         .arg(query.record().value("int_flowid").toString())
                                         .arg(index)
                                         .arg(f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id").toInt())
                                         .arg(f_get_from_cey_bt_unit(f_get_from_cey_bt_dish(ch_dishno, "ch_unitno").toString(), "vch_unitname").toString())
                                         .arg(f_get_from_cey_bt_dish(ch_dishno, "vch_dishname").toString())

                                         .arg(query.record().value("ch_suitflag").toString())
                                         .arg(query.record().value("dish_num").toFloat())
                                         .arg(query.record().value("num_price").toFloat())
                                         .arg(int_indexbox)
                                         .arg(vch_indexbox_desc)
                                         .arg(ch_printflag)

                                         .arg(ch_billno)
                                         .arg(f_get_vch_tablename(query.record().value("ch_tableno").toString()).toString()  + "(" +query.record().value("ch_tableno").toString() + ")")
                                         .arg(query.record().value("dt_operdate").toString())
                                         .arg(int_person)
                                         .arg(query.record().value("vch_operid").toString())

                                         .arg(query.record().value("ch_presentflag").toString())
                                         .arg(fexpandmain_model_sqltablemodel::get_desc_vch_print_memo(query.record().value("vch_print_memo").toString(), (w_bt_dish::KITCHEN_QUIT == key_state?-1:1)))
                                         .arg(vch_plan_id)
                                         .arg(query.record().value("num_price_add").toFloat())
                                         );

                    }
                }
            }
        }//

        {
            //            int y = 0;
            //            query_local.exec("select * from table_kitchen order by int_indexbox asc");
            //            int max = query_local.recordCount();

            //            QString str;
            //            str += query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t";
            //            str += query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t";
            //            str += query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t";
            //            str += query_local.record().fieldName(y++)+ "\t" + query_local.record().fieldName(y++)+ "\t" +query_local.record().fieldName(y++)+ "\t";
            //            while(query_local.next()) {
            //                y = 0;

            //                str += query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t"
            //                        + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t"
            //                        + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t"
            //                        + query_local.record().value(y++).toString()+ "\t" + query_local.record().value(y++).toString()+ "\t" +query_local.record().value(y++).toString()+ "\t";
            //            }
        }

        for(int x = 0; x < 6; x ++) {
            QList<int> int_indexbox_list;
            query_local.exec(QString("select int_indexbox  from table_kitchen where int_kitchen_section = %1  group by int_indexbox ").arg(x));//打印盒子， 检索全部
            while(query_local.next())
            {
                int_indexbox_list << query_local.record().value("int_indexbox").toInt();
            }

            //先将state更新下
            //100000100000 888 888 - > 800 800
            foreach(int int_indexbox , int_indexbox_list) {
                ///指令即 若是flag <> Y则打印的内容为空格，但依旧参与打印
                query_local.exec(QString("select vch_plan_id from table_kitchen where int_kitchen_section = %1 and int_indexbox = %2  " ).arg(x).arg(int_indexbox));//检测全部
                query_local.next();
                QString vch_plan_id = query_local.record().value("vch_plan_id").toString();

                const int int_print_count = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_count").toInt();
                const QString ch_print_id_second_use = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "ch_print_id_second_use").toString();
                const QString ch_check_state = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "ch_check_state").toString();
                QString int_print_id = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id").toString();
                QString int_print_id_second = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id_second").toString();

                if(ch_print_id_second_use != "Y") {
                    int_print_id_second = "";
                }

                int vch_plan_id_TRY_count = 0;
int_print_id_TRY://vch_plan_id

                if(vch_plan_id_TRY_count == 2) continue;//如果已经尝试一次则进入下移循环
                {
                    vch_plan_id_TRY_count++;
                    const QString ch_areaNo_print = f_get_from_cey_bt_kitchen_print(int_print_id, "ch_areaNo").toString();
                    const QString int_id_print = int_print_id;
                    if(!ch_areaNo_print.isEmpty()
                            && !ch_areaNo_table.isEmpty()
                            && ch_areaNo_table != ch_areaNo_print) {// 如果打印机的区域号不为空、打印机的区域号和餐桌区域号不匹配则跳过                                    if(!kitchen_update_transaction(query_local, query, x, int_indexbox, key_state)) {
                        if(!kitchen_update_transaction(query_local, query, x, int_indexbox, key_state)) {

                        }
                        QMetaObject::invokeMethod(parent,
                                                  "showprinterr",
                                                  Qt::QueuedConnection,
                                                  Q_ARG(QString, tr("未在餐桌所在区域的单据已经被忽略")),
                                                  Q_ARG(QString, tr("区域厨打"))
                                                  );
                        continue;
                    }

                    print_format.clear();
                    kitchen_make_ins(parent, key_state, print_format, query_local, x, int_indexbox, vch_plan_id_TRY_count);

                    QString errstring;
                    if(!print_open_fail_exist(print_format.print_path)) {//print_open_fail_exist
                        ///打印机判断
                        Printer_POS *printer = CommonHeader::getposprint_bypath(print_format.print_path);// getprinterBypath(ipport);
                        Printer_POS_auto_destroy pbox(printer);
                        ///~打印机判断
                        if(pbox.printer){//pbox.printer
                            if(pbox.printer->tryOpen(print_format.print_path)){
                                //"------------厨打" << "判断打印机状态" << __LINE__;
                                bool gonext = false;
                                QByteArray v;
                                if(ch_check_state == "Y") {
                                    pbox.printer->writeHex("100402");
                                    errstring = tr("无应答");
                                    if(pbox.printer->waitForReadyReadv(1000)) {
                                        v = pbox.printer->readAll();
                                        gonext = true;
                                    }
                                    qDebug() << pbox.printer->lastError() << w_bt_dish::k2o3_name(key_state);
                                    qDebug() << print_format.print_ins;
                                }
                                if(ch_check_state != "Y") {
                                    v.append(0x12);
                                    gonext = true;
                                }
                                if(gonext){
                                    if(v.endsWith(0x12)){//0001 0010
                                        //打印成功
                                        print_format.resolve();
                                        qDebug() << Printer_Normal::toprint(pbox.printer,print_format.print_ins, int_print_count);
                                        qDebug() << print_format.print_ins <<  pbox.printer->port();

                                        if(!kitchen_update_transaction(query_local, query, x, int_indexbox, key_state)) {
                                            goto indexbox_END;
                                        }

                                        QEventLoop loop;
                                        QTimer::singleShot((f_get_sysparm("kt_spinBox_vtimeout", "5").toInt() * 1000), &loop, SLOT(quit()));
                                        //"厨打间隔-开始";
                                        loop.exec();
                                        //"厨打间隔-结束";
                                        continue;
                                    } else if(v.endsWith(0x16)){//0001 0110
                                        errstring = tr("打印机盖开启");
                                    } else  if(v.endsWith(0x32)){//0011 0010
                                        errstring = tr("打印机缺纸");
                                    }
                                }
                            } else {//tryOpen
                                errstring = pbox.printer->lastError();
                                print_open_fail_insert(print_format.print_path);
                            }//tryOpen
                            // "------------厨打" << "打印结束" << __LINE__;
                        }//pbox.printer
                        if(errstring.isEmpty()) errstring = tr("无响应");
indexbox_END:
                        if(!print_format.print_path.isEmpty()) {
                            QMetaObject::invokeMethod(parent,
                                                      "showprinterr",
                                                      Qt::QueuedConnection,
                                                      Q_ARG(QString, errstring),
                                                      Q_ARG(QString, print_format.print_path+tr("厨打错误")),
                                                      Q_ARG(int, public_sql::error_kitchen),
                                                      Q_ARG(QString, int_id_print)
                                                      );
                        }
                    }//print_open_fail_exist
                    // "------------厨打" << "若是有备打打印机方案" << __LINE__;
                    if(!int_print_id_second.isEmpty()) {//若是有备打打印机方案
                        int_print_id = int_print_id_second;
                        int_print_id_second.clear();
                        goto int_print_id_TRY;
                    }
                }//int_print_id_TRY
            }//for indexbox
        }//for(0 - 5
    }//foreach(const QString &ch_billno
    //
    // "厨打结束";

    query.db.transaction();
    query.exec(" delete from cey_u_orderdish_print_tr where date(dt_operdate)  <>  " + query.curdatestr());
    query.db.commit();
    QFile file_debug("kitchen_update_transaction.txt");
    file_debug.open(QFile::WriteOnly);
    file_debug.write(query.lastQuery().toLocal8Bit() + "\n\n");
    file_debug.close();
}

bool w_bt_dish_kitchen_dish_thread_event::kitchen_update_transaction(lds_query_db &query_local, lds_query_db &query, int int_kitchen_section, int int_indexbox, int key_state)
{
    // "------------厨打:"<<__LINE__ ;
    // __LINE__ << "transaction";
    query.db.transaction();
    if("rb_order" == query.db.connectionName()) {
        return true;
    }

    QString vch_plan_k3o3_state ;
    QString int_flowid;
    QString tablename;
    errstring = tr("数据库错误");


    query.db.transaction();
    query_local.exec(QString("select int_flowid  from table_kitchen where int_kitchen_section = %1 and int_indexbox = '%2'  ")
                     .arg(int_kitchen_section).arg(int_indexbox));//更新部分，更新所有
    while(query_local.next()) {
        if(w_bt_dish::KITCHEN_QUIT == key_state) {
            tablename = "cey_u_orderdish_log";
        } else {
            tablename = "cey_u_orderdish_print_tr";
        }

        int_flowid = query_local.record().value("int_flowid").toString();
        query.exec(QString(" select vch_plan_k3o3_state from  "+tablename+" where int_orderflow = '%1'  ")
                   .arg(int_flowid));
        query.next();
        vch_plan_k3o3_state = query.record().value("vch_plan_k3o3_state").toString();

        if(query.exec(QString("update "+tablename+" set vch_plan_k3o3_state =  '%1' where int_orderflow = '%2' ")
                      .arg(getSqlReplaceIndex(vch_plan_k3o3_state, int_kitchen_section, w_bt_dish::k2o3_stae2hex_char(w_bt_dish::KITCHEN_FINISH)))
                      .arg(int_flowid))){
            qDebug() << query.lastError() << query.lastQuery();
            continue;
        }
        query.db.rollback();
        return false;
    }

    // __LINE__ << "commit";

    qDebug() << query.lastError() << query.lastQuery();
    query.db.commit();
    return true;
}

QString w_bt_dish_kitchen_dish_thread_event::f_get_sysparm(const QString &as_parameter, const QVariant &as_default)
{
    QVariant d = tablemodel.tablename_kvmap_value("cey_sys_parameter", as_parameter, "vch_parameter", "vch_value", "", as_default);
    return d.toString();
}

QString w_bt_dish_kitchen_dish_thread_event::f_get_vch_company()
{
    lds_query query;
    query.exec("select vch_company from cey_sys_company;");
    query.next();
    return query.record().value(0).toString();
}


QVariant w_bt_dish_kitchen_dish_thread_event::f_get_serial_no_cur(const QString &ch_billno)
{
    QString serial_no_cur = tablemodel.tablename_kvmap_value("cey_u_master", ch_billno, "ch_billno", "vch_memo").toString();
    if(serial_no_cur.isEmpty()) {//默认
        serial_no_cur = QString().sprintf("%03d", ch_billno.split("_").value(0).right(5).toInt());
    }
    serial_no_cur = QString().sprintf("%03d", serial_no_cur.toInt());
    return serial_no_cur;
}

bool w_bt_dish_kitchen_dish_thread_event::print_open_fail_exist(const QString &ip)
{
    return tablemodel.tablename_kvmap_value_direct("print_open_fail_exist", ip).isValid();
}

void  w_bt_dish_kitchen_dish_thread_event::print_open_fail_insert(const QString &ip)
{
    tablemodel.tablename_kvmap_insert("print_open_fail_exist", ip, "");
}

void w_bt_dish_kitchen_dish_thread_event::print_open_fail_clear()
{
    tablemodel.tablename_kvmap_clear("print_open_fail_exist");
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_vch_tablename(const QString &ch_tableno)
{
    if("Q000" == ch_tableno) {
        return tr("快餐");
    }

    return f_get_from_cey_bt_table(ch_tableno, "vch_tablename");
}


/////////////
QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_bt_kitchen_print(const QString &int_id, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_bt_kitchen_print", int_id, "int_id", valuename);
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_u_table(const QString &ch_billno, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_u_table", ch_billno, "ch_billno", valuename);
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_bt_dish(const QString &ch_dishno, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_bt_dish", ch_dishno, "ch_dishno", valuename);
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_bt_unit(const QString &ch_unitno, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_bt_unit", ch_unitno, "ch_unitno", valuename);
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_bt_table(const QString &ch_tableno, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_bt_table", ch_tableno, "ch_tableno", valuename);
}

QVariant w_bt_dish_kitchen_dish_thread_event::f_get_from_cey_bt_kitchen_plan(const QString &vch_plan_id, const QString &valuename)
{
    return tablemodel.tablename_kvmap_value("cey_bt_kitchen_plan", vch_plan_id, "vch_plan_id", valuename);
}

void w_bt_dish_kitchen_dish_thread_event::kitchen_make_ins(QObject *parent, const w_bt_dish::kitchenState key_state, public_ins_maker &print_format, lds_query_db &query_local, int x, int int_indexbox, int vch_plan_id_TRY_count)
{
    lds_query query;
    QByteArray bp_content_len = "s"+f_get_sysparm("kt_lineEdit_content_scale", "00").toLocal8Bit();
    int bp_content_len_scale_h = 1;
    int s0 = bp_content_len.mid(1,1).toInt();//s00
    if(s0 != 0){
        bp_content_len_scale_h = s0 + 1;
    }

    int bp_price_dec = f_get_sysparm("bp_fmt_price_dec").toInt();
    int bp_num_dec = f_get_sysparm("bp_fmt_num_dec").toInt();
    int kt_spinBox_vch_dishname_width = f_get_sysparm("kt_spinBox_vch_dishname_width").toInt() / bp_content_len_scale_h;
    int kt_spinBox_num_price_width = f_get_sysparm("kt_spinBox_num_price_width").toInt() / bp_content_len_scale_h;
    int kt_spinBox_num_num_width = f_get_sysparm("kt_spinBox_num_num_width").toInt() / bp_content_len_scale_h;
    int kt_spinBox_unit_width = f_get_sysparm("kt_spinBox_unit_width").toInt() / bp_content_len_scale_h;

    int kt_checkBox_ch_tailtotal  = f_get_sysparm("kt_checkBox_ch_tailtotal").toInt();
    int kt_checkBox_ch_rowno  = f_get_sysparm("kt_checkBox_ch_rowno").toInt();
    int kt_checkBox_ktitle2shopname  = f_get_sysparm("kt_checkBox_ktitle2shopname").toInt();
    int kt_rowno;


    // "------------厨打:"<<__LINE__ ;
    query_local.exec(QString("select * from table_kitchen where int_kitchen_section = %1 and int_indexbox = %2 and ch_printflag ='Y' and num_num <> 0 " ).arg(x).arg(int_indexbox));//打印部分,只打印ch_printflag=‘Y’的部分
    if(query_local.next()) {
        QString vch_indexbox_desc = query_local.record().value("vch_indexbox_desc").toString();
        QString vch_plan_id = query_local.record().value("vch_plan_id").toString();
        QString ch_billno = query_local.record().value("ch_billno").toString();
        QString int_print_id = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id").toString();
        const int int_dish_type = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_dish_type").toInt();
        int int_tail_block = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_tail_block").toInt();
        int int_head_block = f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_head_block").toInt();

        print_format.paperwidth = f_get_from_cey_bt_kitchen_print(int_print_id, "int_paperwidth").toInt();
        print_format.print_path = f_get_from_cey_bt_kitchen_print(int_print_id, "vch_printip").toString();

        int bp_beginins = print_format.paperwidth /16;

        print_format.drawText("a10,s00");
        if(f_get_sysparm("kt_checkBox_vch_plan_id") == "1") {
            print_format.drawText("", tr("厨打方案编号") + vch_plan_id);
            print_format.drawN();
        }
        if(vch_plan_id_TRY_count == 2){
            print_format.drawText("", tr("备打打印机编号") + f_get_from_cey_bt_kitchen_plan(vch_plan_id, "int_print_id_second").toString());
            print_format.drawN();
        }

        //只是修改title
        if(x >= 0 && x <= 2){
            if(kt_checkBox_ktitle2shopname == 1) {
                print_format.drawText("a00,s11", f_get_vch_company());
            } else {
                print_format.drawText("a00,s11", tr("厨打单"));
            }
        }
        if(x >= 3 && x <= 5) {
            print_format.drawText("a00,s11", tr("出品单"));
        }

        if(w_bt_dish::KITCHEN_QUIT <= key_state && key_state <= w_bt_dish::KITCHEN_MAX){
            print_format.drawText("", "/"+w_bt_dish::k2o3_name(key_state));
        }
        if(lds::SYS_LANGUAGE == "EN" && int_dish_type == 0) {//一桌一单
            print_format.drawN();
            print_format.drawText("a00", tr("汇总")+"\n");
        }
        //添加title、说明
        query.exec(QString("select vch_plan_desc from cey_u_orderdish where int_flowID = %1  ").arg(query_local.record().value("int_flowid").toString()));
        query.next();
        QString vch_plan_desc = query.record().value("vch_plan_desc").toString();
        if(w_bt_dish::KITCHEN_ZHUANTAI == key_state) {
            if(!vch_plan_desc.isEmpty()) {
                print_format.drawN();
                print_format.drawText("a10,s00");
                print_format.drawText("", vch_plan_desc);
            }
        }
        if(w_bt_dish::KITCHEN_FUZHI == key_state) {
            if(!vch_plan_desc.isEmpty()) {
                print_format.drawN();
                print_format.drawText("a10,s00");
                print_format.drawText("", vch_plan_desc);
            }
        }
        if(w_bt_dish::KITCHEN_BINGTAI == key_state) {
            if(!vch_plan_desc.isEmpty()) {
                print_format.drawN();
                print_format.drawText("a10,s00");
                print_format.drawText("", vch_plan_desc);
            }
        }
        if(w_bt_dish::KITCHEN_ZHUANTAI_CAIPIN == key_state) {
            if(!vch_plan_desc.isEmpty()) {
                print_format.drawN();
                print_format.drawText("a10,s00");
                print_format.drawText("", vch_plan_desc);
            }
        }
        ///开始打印
        print_format.drawN();

        print_format.drawText("a10,s00");
        print_format.drawText("a10");
        print_format.begin_column_print(bp_beginins);
        if(f_get_sysparm("kt_checkBox_ch_tableno") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_ch_tableno_scale", "00").toLocal8Bit(), tr("餐桌") + ":" + query_local.record().value("ch_tableno").toString());
        if(f_get_sysparm("kt_checkBox_ch_serialno") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_ch_serialno_scale", "00").toLocal8Bit(), tr("流水号") + ":" + f_get_serial_no_cur(ch_billno).toString());
        if(f_get_sysparm("kt_checkBox_ch_billno") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_ch_billno_scale", "00").toLocal8Bit(), tr("单号") + ":" + ch_billno);
        if(f_get_sysparm("kt_checkBox_vch_operid") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_vch_operid_scale", "00").toLocal8Bit(), tr("点菜人") + ":" + query_local.record().value("vch_operid").toString());

        if(f_get_sysparm("kt_checkBox_dt_operdate") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_dt_operdate_scale", "00").toLocal8Bit(), tr("点菜时间") + ":" + query_local.record().value("dt_operdate").toDateTime().toString("yyyy-MM-dd hh:mm:ss"));
        if(f_get_sysparm("kt_checkBox_dt_cur") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_dt_cur_scale", "00").toLocal8Bit(), tr("打印时间") + ":" + n_func::f_get_sysdatetime().toString("yyyy-MM-dd hh:mm:ss"));
        if(f_get_sysparm("kt_checkBox_int_person") == "1") print_format.drawText("s" + f_get_sysparm("kt_lineEdit_int_person_scale", "00").toLocal8Bit(), tr("人数") + ":" + query_local.record().value("int_person").toString());
        if(f_get_sysparm("kt_checkBox_vch_memo") == "1") print_format.drawText("s" + f_get_sysparm("kt_checkBox_vch_memo_scale", "00").toLocal8Bit(), tr("开台备注") + ":" + f_get_from_cey_u_table(ch_billno, "vch_memo").toString());

        print_format.end_column_print();
        print_format.drawN();

        // "------------厨打:"<<__LINE__ ;
        query_local.exec(QString(
                             //                                                                                        " select '%1' as vch_dishname, '%2' as num_num, '%3' as num_price ,'' as ch_presentflag, '' as vch_print_memo, '' as int_flowid union "
                             " select (case ch_suitflag when 'P' then '%4' when 'Y' then '%5' else '' end) || vch_dishname as vch_dishname "//qsqlite的字段拼接用 ||
                             ", num_num"
                             ", num_price"
                             ", num_price_add"
                             ", ch_presentflag"
                             ", vch_print_memo"
                             ", int_flowid"
                             ", vch_unitname"
                             "  from table_kitchen  where int_kitchen_section = %6 and int_indexbox = %7 and ch_printflag ='Y' and num_num <> 0 ")//ch_printflag若是设置了套菜厨打方案，起作用
                         //                                                                                    .arg(tr("品名")).arg(tr("数量")).arg(tr("单价"))
                         .arg(tr("套")+")").arg(/*tr("细")*/"   ")
                         .arg(x).arg(int_indexbox)
                         );
        bool isheader = true;
        float total = 0;
        print_format.drawText("a10,s00");
        print_format.drawText("-");
        print_format.drawN();
        kt_rowno = 0;

        while(query_local.next()) {///while
            QString ch_presentflag  ;
            QString vch_print_memo ;
            QString num_num;
            QString unit;
            QString num_price ;
            QString num_price_add ;
            QString vch_dishname;
            QString int_flowid = query_local.record().value("int_flowid").toString();
            QString preapp;
BILL_CMB_HEADER:
            if(isheader) {
                ch_presentflag = "";
                vch_print_memo = "";
                num_num = tr("数量");
                unit = tr("单位");
                num_price = tr("单价");
                num_price_add = "";
                vch_dishname = tr("品名");
            } else {
                ch_presentflag  = query_local.record().value("ch_presentflag").toString();
                vch_print_memo  = query_local.record().value("vch_print_memo").toString();
                num_num  = query_local.record().value("num_num").toString();
                unit  = query_local.record().value("vch_unitname").toString();
                num_price  = query_local.record().value("num_price").toString();
                num_price_add  = query_local.record().value("num_price_add").toString();
                vch_dishname  = query_local.record().value("vch_dishname").toString();
            }

            if(!isheader && kt_checkBox_ch_rowno == 1) {
                kt_rowno ++;
                query.exec(QString("select int_id from cey_u_orderdish where int_flowID = %1  ").arg(int_flowid));
                query.next();
                preapp += QString("%1.").arg(query.record().value("int_id").toString());
            }
            if(ch_presentflag == "Y") {
                preapp += tr("赠")+")";
            }
            if(isheader) {
            } else {
                num_num =  QString().sprintf((char*)((QByteArray("%.")+ QByteArray::number(bp_num_dec)+"f").data()), num_num.toFloat());
                num_price =  QString().sprintf((char*)((QByteArray("%.")+ QByteArray::number(bp_price_dec)+"f").data()), num_price.toFloat());
            }
            if(ch_presentflag != "Y") {
                total += num_num.toFloat() * num_price.toFloat() + num_price_add.toFloat();
            }

            if(isheader&&f_get_sysparm("kt_checkBox_title") != "1") {//打印表头，并且不启用打印
                isheader = false;
                goto BILL_CMB_HEADER;
            }
            // "num_num" << num_num;
            if(f_get_sysparm("kt_spinBox_vch_dishname_row", "1") == "1" && f_get_sysparm("kt_checkBox_vch_dishname") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(preapp + vch_dishname , kt_spinBox_vch_dishname_width, "0"), kt_spinBox_vch_dishname_width, Qt::AlignLeft);
            if(f_get_sysparm("kt_spinBox_num_num_row", "1") == "1" && f_get_sysparm("kt_checkBox_num_num") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(num_num , kt_spinBox_num_num_width, "0"), kt_spinBox_num_num_width, Qt::AlignRight);
            if(f_get_sysparm("kt_spinBox_unit_row", "1") == "1" && f_get_sysparm("kt_checkBox_unit") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(unit , kt_spinBox_unit_width, "0"), kt_spinBox_unit_width, Qt::AlignRight);
            if(f_get_sysparm("kt_spinBox_num_price_row", "1") == "1" && f_get_sysparm("kt_checkBox_num_price") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(num_price , kt_spinBox_num_price_width, "0"), kt_spinBox_num_price_width, Qt::AlignRight);
            print_format.drawN();
            if(f_get_sysparm("kt_spinBox_vch_dishname_row", "1") == "2" && f_get_sysparm("kt_checkBox_vch_dishname") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(preapp + vch_dishname , kt_spinBox_vch_dishname_width, "0"), kt_spinBox_vch_dishname_width, Qt::AlignLeft);
            if(f_get_sysparm("kt_spinBox_num_num_row", "1") == "2" && f_get_sysparm("kt_checkBox_num_num") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(num_num , kt_spinBox_num_num_width, "0"), kt_spinBox_num_num_width, Qt::AlignRight);
            if(f_get_sysparm("kt_spinBox_unit_row", "1") == "2" && f_get_sysparm("kt_checkBox_unit") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(unit , kt_spinBox_unit_width, "0"), kt_spinBox_unit_width, Qt::AlignRight);
            if(f_get_sysparm("kt_spinBox_num_price_row", "1") == "2" && f_get_sysparm("kt_checkBox_num_price") == "1")print_format.drawText(bp_content_len, public_printby_ch_billno::getfixedlen(num_price , kt_spinBox_num_price_width, "0"), kt_spinBox_num_price_width, Qt::AlignRight);
            print_format.drawN();

            ///做法默认添加
            if(!vch_print_memo.isEmpty())print_format.drawText(bp_content_len, "*"+vch_print_memo);
            print_format.drawN();

            if(isheader) {
                print_format.drawText("a10,s00");
                print_format.drawText("-");
                print_format.drawN();
                if(!vch_indexbox_desc.isEmpty()){
                    print_format.drawText("a00", "---"+vch_indexbox_desc.toLocal8Bit()+"---");
                    print_format.drawN();
                    print_format.drawText("a10");
                }
                isheader = false;
                goto BILL_CMB_HEADER;
            }
        } //while
        // "------------厨打:" << __LINE__;
        if(kt_checkBox_ch_tailtotal == 1) {
            print_format.drawText("a10,s00");
            print_format.drawText("-");
            print_format.drawText("a10,s00", tr("小计")+":"+QString().sprintf("%.2f", total));
            print_format.drawN();
        }
        while(int_tail_block > 0 && int_tail_block--) {//票尾留白
            print_format.drawText("", "\n");
        }
        while(int_head_block > 0 && int_head_block--) {//票尾留白
            print_format.print_ins.prepend(pieceIns("", "\n"));
        }
        print_format.drawTextEnd("1B6405 1D5601");//走纸5x， 切纸
    }//while
    //解析
    // "------------厨打" << "打印" << __LINE__;
}

QString w_bt_dish_kitchen_dish_thread_event::getSqlReplaceIndexSql(const QString &key, int index, char rv)
{
    index++;
    // index = 3
    //    concat(substr(vch_plan_k3o3_state, 1, 2), '1', substr(vch_plan_k3o3_state,4, 3))

    //substr(vch_plan_k3o3_state, 1, 0), '1', substr(vch_plan_k3o3_state,6, 1)

    //    // "getSqlReplaceIndex" << index;
    return QString("concat(substr(%1, 1, %2), '%3', substr(%1,%4, %5))").arg(key).arg(index - 1).arg(rv).arg(index+1).arg(6 - index);
}

QString w_bt_dish_kitchen_dish_thread_event::getSqlReplaceIndex(const QString &key, int index, char rv)
{
    index++;
    // index = 3
    //    concat(substr(vch_plan_k3o3_state, 1, 2), '1', substr(vch_plan_k3o3_state,4, 3))

    //substr(vch_plan_k3o3_state, 1, 0), '1', substr(vch_plan_k3o3_state,6, 1)

    //    // "getSqlReplaceIndex" << index;
    QString k = key.mid(0, index - 1) + rv + key.mid(index, 6 - index);
    return k;
    //    return QString("concat(substr(%1, 1, %2), '%3', substr(%1,%4, %5))").arg(key).arg(index - 1).arg(rv).arg(index+1).arg(6 - index);
}


w_bt_dish_kitchen_dish_thread::w_bt_dish_kitchen_dish_thread(QObject *parent) : lds_thread("厨打", parent)
{
    isbusy = false;
}

w_bt_dish_kitchen_dish_thread::~w_bt_dish_kitchen_dish_thread()
{

}

void w_bt_dish_kitchen_dish_thread::emitsignalstart(QObject *parent, const QString &ch_billno)
{
    if(isbusy){
        qDebug() << "------------"+_title+"繁忙";
        return;
    }
    emit signalstart(parent, ch_billno);
}

void w_bt_dish_kitchen_dish_thread::run()
{
    w_bt_dish_kitchen_dish_thread_event event;
    connect(this,SIGNAL(signalstart(QObject*,QString)),&event ,SLOT(tokitchen(QObject*,QString)));//若是正常打印，则会跳过
    connect(&event, SIGNAL(signal_busy(bool)), this,SLOT(to_set_run_busy(bool)));
    this->exec();
}

void w_bt_dish_kitchen_dish_thread::to_set_run_busy(bool f)
{
    isbusy = f;
}

//============
#include "ui_w_bt_dish_kitchen_dish_param.h"
w_bt_dish_kitchen_dish_param::w_bt_dish_kitchen_dish_param(QWidget *parent) :
    lds_model_mapwidget_vertical(parent), ui (new Ui_w_bt_dish_kitchen_dish_param)
{
    ui->setupUi(this);
    //1

    tablemodel = new lds_model_sqltablemodel;
    tablemodel->setEditStrategy(QSqlTableModel::OnManualSubmit);
    tablemodel->setTable("cey_sys_parameter");
    tablemodel->setFilter("vch_parameter like 'kt_%'");
    tablemodel->select();
    //2
    mapper = new QDataWidgetMapper(this);
    mapper->setSubmitPolicy(QDataWidgetMapper::AutoSubmit);
    mapper->setOrientation(Qt::Vertical);
    mapper->setModel(tablemodel);

    scan_all_objectname_add_map("kt_");
    mapper->setCurrentIndex(1);
    ///connect
    connect(ui->pushButton_cancel,SIGNAL(clicked()),this,SLOT(tocancel()));
    connect(ui->pushButton_ok,SIGNAL(clicked()),this,SLOT(took()));

    ///厨打服务器
    QString kitchen_service_ip = wxmanager::f_get_sysparm("kitchen_service_ip");
    QString localip192 = lds::LOCAL_IP_LIKE_192;
    ui->kt_checkBox_kitchen_start->setChecked(!kitchen_service_ip.isEmpty());
    if(!kitchen_service_ip.isEmpty()) {
        ui->label_kitchen_ip->setText(tr("厨打服务器")+"("+kitchen_service_ip+")"+(kitchen_service_ip ==localip192 ? "": (","+tr("厨打服务器")+tr("非本机ip")+"("+localip192+")")));
    } else {
        ui->label_kitchen_ip->setText("");
    }
    connect(ui->kt_checkBox_kitchen_start, SIGNAL(clicked(bool)),this,SLOT(to_kitchen_start_toggled(bool)));
}

void w_bt_dish_kitchen_dish_param::took()
{
    if(saveData()) {
        this->accept();
    }
}

void w_bt_dish_kitchen_dish_param::tocancel()
{
    if(tablemodel->model_is_dirty()){
        switch(lds_messagebox::question(this, tr("提示"),tr("有数据未保存,确认保存?"), tr("保存"),tr("不保存"),tr("取消"))){
        case 0:
            if(!saveData()){
                return;
            }
            break;
        case 1:
            break;
        case 2:
            return;
        }
    }
    this->reject();
}

void w_bt_dish_kitchen_dish_param::to_kitchen_start_toggled(bool checked)
{
    ///厨打服务器
    QString kitchen_service_ip = wxmanager::f_get_sysparm("kitchen_service_ip");
    QString localip192 = lds::LOCAL_IP_LIKE_192;

    if(!kitchen_service_ip.isEmpty() && localip192 != kitchen_service_ip) {
        if(1 == lds_messagebox::question(this, tr("提示"), ui->label_kitchen_ip->text()+tr("是否继续修改"), tr("继续"), tr("取消"))) {
            ui->kt_checkBox_kitchen_start->setChecked(!checked);
            return;
        }
    }
    if(checked) {
        wxmanager::f_set_sysparm("kitchen_service_ip", localip192);
    } else {
        wxmanager::f_set_sysparm("kitchen_service_ip", "");
    }

    ui->label_kitchen_ip->setText(tr("厨打服务器")+":"+wxmanager::f_get_sysparm("kitchen_service_ip"));
}

bool w_bt_dish_kitchen_dish_param::insert_sql_objectname(const QString &objectname)
{
    lds_query query;
    query.exec(QString(" select vch_parameter from cey_sys_parameter where vch_parameter = '%1' ").arg(objectname));
    if(!query.next()) {
        return query.exec(QString("insert into cey_sys_parameter(vch_parameter, vch_value) value('%1', '' )")
                          .arg(objectname));//39
    }
    return true;
}

bool w_bt_dish_kitchen_dish_param::saveData()
{
    if(tablemodel->submitAll()) {
        lds_messagebox::information(this, tr("提示"),tr("保存成功"));
        return true;
    }
    //错误提示
    lds_messagebox::warning(this, tr("提示"),tr("数据库错误")+"\n"+ tablemodel->lastError().text());
    return false;
}


w_bt_dish_kitchen_dish_print_state_thread_event::w_bt_dish_kitchen_dish_print_state_thread_event(QObject *parent)
{
}

w_bt_dish_kitchen_dish_print_state_thread_event::~w_bt_dish_kitchen_dish_print_state_thread_event()
{

}



//0x12   正常
//0x16   开盖
//0x32   缺纸
//0x10   故障
//0x00   无应答
void w_bt_dish_kitchen_dish_print_state_thread_event::tocheck(QObject *parent)
{
    emit signal_busy(true);
    ///
    lds_query query;
    Printer_POS *printer=0;
    query.exec("select b.int_id, b.vch_printip, b.vch_printname from cey_bt_kitchen_plan a, cey_bt_kitchen_print b where a.int_print_id = b.int_id;");
    while(query.next()) {///while
        QString vch_printip = query.record().value("vch_printip").toString();
        QString int_id = query.record().value("int_id").toString();
        printer = CommonHeader::getposprint_bypath(vch_printip);
        Printer_POS_auto_destroy pbox(printer);

        if(pbox.printer && pbox.printer->tryOpen(vch_printip)) {
            pbox.printer->writeHex("100402");
            if(pbox.printer->waitForReadyReadv(1000)){
                QByteArray v = pbox.printer->readAll();
                if(v.endsWith(0x12)){//0001 0010
                    login_emit_signal_name_id_state(parent, int_id, 0x12);
                } else  if(v.endsWith(0x16)){//0001 0010
                    login_emit_signal_name_id_state(parent, int_id, 0x16);
                }else if(v.endsWith(0x32)){//0001 0010
                    login_emit_signal_name_id_state(parent, int_id, 0x32);
                } else {
                    login_emit_signal_name_id_state(parent, int_id, 0x10);//打印机故障
                }
                continue;
            }
        }//tryopen
        login_emit_signal_name_id_state(parent, int_id, 0x00);//无响应
    }//while

    ///
    emit signal_busy(false);
}

void w_bt_dish_kitchen_dish_print_state_thread_event::login_emit_signal_name_id_state(QObject *parent, const QString &int_id, uchar state)
{
    QMetaObject::invokeMethod(parent,
                              "signal_kitchen_print_state",
                              Qt::QueuedConnection,
                              Q_ARG(QString, int_id),
                              Q_ARG(uchar, state)
                              );
    // int_id << state << __LINE__;
}


w_bt_dish_kitchen_dish_print_state_thread::w_bt_dish_kitchen_dish_print_state_thread(QObject *parent) :
    lds_thread("打印机状态线程", parent)
{
    isbusy = false;
}

w_bt_dish_kitchen_dish_print_state_thread::~w_bt_dish_kitchen_dish_print_state_thread()
{

}

void w_bt_dish_kitchen_dish_print_state_thread::emitsignalstart(QObject *parent)
{
    if(isbusy){
        // "------------"+_title+"繁忙";
        return;
    }
    emit signalstart(parent);
}

void w_bt_dish_kitchen_dish_print_state_thread::run()
{
    w_bt_dish_kitchen_dish_print_state_thread_event event;
    connect(this,SIGNAL(signalstart(QObject*)),&event ,SLOT(tocheck(QObject*)));//若是正常打印，则会跳过
    connect(&event, SIGNAL(signal_busy(bool)), this,SLOT(to_set_run_busy(bool)));
    this->exec();
}

void w_bt_dish_kitchen_dish_print_state_thread::to_set_run_busy(bool f)
{
    isbusy = f;
}
