#include "w_scr_dish_restaurant_dialog.h"
#include "ui_w_scr_dish_restaurant_dialog.h"
#include "lds_query.h"
#include <QSqlRecord>
#include <QSqlError>
#include "backheader.h"
#include "founding_cook.h"
#include "lds_messagebox.h"
#include "n_func.h"
#include "manager_view.h"
#include "lock_screen.h"
#include "power_oper.h"
#include "lds_menu.h"
#include "table_lock.h"
#include "w_scr_dish.h"
#include <QElapsedTimer>
#include <QTimeLine>
#include "lds_dialog_input.h"
#include "lds_pushbuttonlock.h"
#include "w_scr_dish_switch_detail.h"
#include "w_scr_dish_m_hang_pay_dialog.h"
#include <QPainter>
#include "w_scr_dish_restaurant_preorder.h"
#include "ftableview_standmodel_sql_table.h"
#include "ftableview_delegate.h"
#include "public_printby_ch_billno.h"
#include "ftableview_standmodel_sql_none.h"
#include "w_scr_dish_restaurant_table_transfer.h"
#include "w_scr_dish_restaurant_table_copy.h"
#include "w_scr_dish_restaurant_div_pop.h"
#include "w_scr_dish_restaurant_table_cmb.h"
#include "table_order_2.h"
#include "w_scr_dish_pay.h"
#include "ldslight.h"
#include "w_sys_manage_wirelessordermonitoring.h"
#include "table_order_2_1366x768.h"
#include "w_scr_dish_restaurant_table_dish_transfer.h"
#include "w_bt_dish_kitchen_dish_state.h"
#include "fexpandmain.h"
#include "w_bt_dish.h"
#include "w_rpt_report_frame_business_summary.h"
#include "w_m_member_list.h"
#include "modify_password.h"
#include "business_documents_query.h"
#include "special_query.h"
#include "table_statistics.h"
#include "w_scr_dish_restaurant_parameter.h"
#include "estimated_clear.h"
#include "w_scr_dish_guqing_report.h"
#include "ui_w_scr_dish_pay.h"
#include "object_auto_del.h"
#include "w_scr_dish_language_switch_set.h"

w_scr_dish_restaurant_dialog::w_scr_dish_restaurant_dialog(QWidget *parent) :
    lds_Dialog(0)
{
    ui = new Ui_w_scr_dish_restaurant_dialog;
    ui->setupUi(this);

    //1
    ordertable_msg_loop = -1;//第一次进入为-1， 确保不会出现二次弹窗
    lds::setwflagFrameless(this);
    ui->frame_top->setFixedHeight(lds::QT_FIXED_HEIGHT_BOTTOM);
    ui->frame_map_design_save->setFixedHeight(lds::QT_FIXED_HEIGHT_BOTTOM);
    ui->frame_map_design_save->setFrameShape(QFrame::NoFrame);
    ui->frame_map_design_save->layout()->setMargin(restraurantDelegate::paint_border );
    //2.1
    {
        lds_menu *menu=new lds_menu(this);
        QWidgetAction *widgetaction=new QWidgetAction(ui->pushButton_set);
        widgetaction->setDefaultWidget(ui->frame_manager_view);
        menu->addAction(widgetaction);
        ui->pushButton_set->setMenu(menu);
        connect(ui->pushButton_switchback,SIGNAL(clicked()),this,SLOT(toswitchback()));
        //        connect(ui->pushButton_special_query, SIGNAL(clicked()),this,SLOT(tospecial_query()));
        connect(ui->pushButton_mhangpay,SIGNAL(clicked()),this,SLOT(tomhangpay()));
        connect(ui->pushButton_mrecharge,SIGNAL(clicked()),this,SLOT(tomrecharge()));

        connect(ui->pushButton_business_status,SIGNAL(clicked()),this,SLOT(tobusiness_status()));
        connect(ui->pushButton_lockscreen,SIGNAL(clicked()),this,SLOT(tolockscreen()));
        connect(ui->pushButton_curtable_status,SIGNAL(clicked()),this,SLOT(tocurtable_status()));
        connect(ui->pushButton_businessdata_query,SIGNAL(clicked()),this,SLOT(tobusinessdata_query()));

        connect(ui->pushButton_pwdchange,SIGNAL(clicked()),this,SLOT(topwdchange()));
        connect(ui->pushButton_switch,SIGNAL(clicked()),this,SLOT(toswitch()));
        connect(ui->pushButton_exit, SIGNAL(clicked()),this,SLOT(toexit()));

    }
    //微信功能
    {
        lds_menu *menu=new lds_menu(this);
        QWidgetAction *widgetaction=new QWidgetAction(ui->pushButton_other);
        widgetaction->setDefaultWidget(ui->frame);
        menu->addAction(widgetaction);
        ui->pushButton_other->setMenu(menu);
    }
    //2.5
    ftableview_standmodel_sql *modeltype = new ftableview_standmodel_sql(this);
    modeltype->sql = "SELECT concat(vch_areaname,'[',ch_areano,']') as nametype , ch_areano  FROM cey_bt_table_area union select  '"+tr("所有区域")+"' as vch_areaname, '%' as ch_areano ORDER BY ch_areano ASC";
    ui->tableView_ch_areano->setModel(modeltype);
    modeltype->selectionmodel = ui->tableView_ch_areano->selectionModel();
    ftableview_delegate *d = new ftableview_delegate(ui->tableView_ch_areano);
    ui->tableView_ch_areano->setProperty("outer_stylesheet", "tableView_type");
    d->keepConnect(ui->tableView_ch_areano);

    ui->tableView_ch_areano->setItemDelegate(d);
    ui->frame_view_type->setFixedWidth(120);
    if(lds::MAIN_WINDOW_SIZE.width()==800){
        ui->tableView_ch_areano->setFixedRCcount(4, 1, 100, lds::QT_FIXED_HEIGHT_BOTTOM);
    } else if(lds::MAIN_WINDOW_SIZE.width()==1024){
        ui->tableView_ch_areano->setFixedRCcount(4, 1, 100, lds::QT_FIXED_HEIGHT_BOTTOM);
    } else if(lds::MAIN_WINDOW_SIZE.width()==1920){
        ui->tableView_ch_areano->setFixedRCcount(6, 1, 180, lds::QT_FIXED_HEIGHT_BOTTOM);
        ui->frame_view_type->setFixedWidth(200);
    } else {
        ui->tableView_ch_areano->setFixedRCcount(6, 1, 100, lds::QT_FIXED_HEIGHT_BOTTOM);
    }

    //5
    modeltable = new ftableview_standmodel_sql_table(ui->tableView_ch_tableno);
    modeltable->enable_save_select_info(false);
    ui->tableView_ch_tableno->setModel(modeltable);
    modeltable->selectionmodel = ui->tableView_ch_tableno->selectionModel();
    restraurantDelegate *delegatetable = new restraurantDelegate(ui->tableView_ch_tableno);
    delegatetable->preprinttablemap = &(public_sql::preprinttablemap);
    ui->tableView_ch_tableno->setItemDelegate(delegatetable);

    //2.5
    QStandardItemModel *standmodel_tablestate = new QStandardItemModel;
    int type_count = 0;
    foreach(const tableSTATE &t, delegatetable->getTablestatelist()){
        if(t.state == tableState_DISABLE ) continue;
        QStandardItem * item = new QStandardItem(QString::number(t.state));
        item->setData(restraurantDelegate::getPixmapByStateList(t.state), Qt::DecorationRole);
        standmodel_tablestate->appendRow(item);
        type_count ++;//list中有disable，不会计算在内
    }
    ui->tableView_3->setShowGrid(false);
    ui->tableView_3->setModel(standmodel_tablestate);
    ui->tableView_3->setItemDelegate(new restraurantDelegateTableState(this));
    ui->tableView_3->verticalHeader()->setDefaultSectionSize(20);
    ui->tableView_3->setFixedHeight(ui->tableView_3->verticalHeader()->defaultSectionSize()*type_count);
    ui->tableView_3->setEditTriggers(QTableView::NoEditTriggers);
    ui->tableView_3->setFocusPolicy(Qt::NoFocus);
    ui->tableView_3->setSelectionMode(QTableView::NoSelection);
    ui->tableView_3->setVerticalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    ui->tableView_3->horizontalHeader()->setStretchLastSection(true);
    ui->tableView_3->horizontalHeader()->hide();
    ui->tableView_3->verticalHeader()->hide();

    //打印机状态
    standmodel_print_state = new QStandardItemModel;
    standmodel_print_state->setHorizontalHeaderLabels(QStringList() << "" << "");//打印机名称，打印机状态
    ui->tableView_print_state->setModel(standmodel_print_state);
    ui->tableView_print_state->setShowGrid(false);
    ui->tableView_print_state->verticalHeader()->setDefaultSectionSize(30);
    ui->tableView_print_state->setEditTriggers(QTableView::NoEditTriggers);
    ui->tableView_print_state->setFocusPolicy(Qt::NoFocus);
    ui->tableView_print_state->setSelectionMode(QTableView::NoSelection);
    //    ui->tableView_print_state->setHorizontalScrollBarPolicy(Qt::ScrollBarAlwaysOff);
    ui->tableView_print_state->verticalHeader()->hide();
    ui->tableView_print_state->horizontalHeader()->hide();
    ui->tableView_print_state->resizeColumnToContents(0);
    //    ui->pushButton_print_state_hheader->set_rt_checked_warn(true);
    //3
    connect(ui->pushButton_waimaipay,SIGNAL(clicked()),this,SLOT(to_waimaipay()));
    connect(ui->pushButton_weixinwaimai,SIGNAL(clicked()),this,SLOT(to_weixinwaimai()));
    connect(ui->pushButton_weixinquitbill,SIGNAL(clicked()),this,SLOT(to_weixinquitbill()));

    connect(ui->pushButton_canceltable,SIGNAL(clicked()),this,SLOT(tocanceldesk()));
    connect(ui->pushButton_lockstate,SIGNAL(clicked()),this,SLOT(tolockstate()));
    connect(ui->pushButton_open,SIGNAL(clicked()),this,SLOT(toopen()));
    connect(ui->pushButton_other,SIGNAL(clicked()),this,SLOT(toother()));
    connect(ui->pushButton_shift,SIGNAL(clicked()),this,SLOT(totabletransfer()));
    connect(ui->pushButton_preprint,SIGNAL(clicked()),this,SLOT(topreprint()));
    connect(ui->pushButton_order,SIGNAL(clicked()),this,SLOT(topreorder()));
    connect(ui->pushButton_parameter,SIGNAL(clicked()),this,SLOT(toparameter()));

    connect(ui->tableView_ch_tableno,SIGNAL(clicked(QModelIndex)),this,SLOT(totablesave(QModelIndex)));
    connect(ui->tableView_ch_areano,SIGNAL(signalclick(QString)),this,SLOT(totable_ch_areano(QString)));

    connect(public_sql::save_login,SIGNAL(signalrestaurantupdate()), this,SLOT(torefresh()));
    connect(public_sql::save_login,SIGNAL(signalrestaurantupdate(int,int)),ui->widget_going,SLOT(setstep(int,int)));
    connect(public_sql::save_login, SIGNAL(signal_kitchen_print_state(QString,uchar)), this,SLOT(update_print_name_id_state(QString,uchar)));
    connect(public_sql::save_login, SIGNAL(signal_kitchen_print_error(QString)), this,SLOT(update_print_name_id_error(QString)));

    connect(ui->pushButton_dishcopy,SIGNAL(clicked()),this,SLOT(todishcopy()));
    connect(ui->pushButton_tableCombine,SIGNAL(clicked()),this,SLOT(totableCombine()));
    connect(ui->pushButton_pay, SIGNAL(clicked()),this,SLOT(topay()));
    connect(ui->pushButton_dish_transfer, SIGNAL(clicked()),this,SLOT(todishtransfer()));
    connect(ui->pushButton_print_state_hheader, SIGNAL(clicked()),this,SLOT(toshowprintstate()));
    connect(modeltable, SIGNAL(signalFinished()), this, SLOT(toupdate_section_by_map()));

    connect(ui->pushButton_restaurant_mode_select, SIGNAL(clicked()), this, SLOT(torestaurant_mode_select()));
    connect(ui->graphicsView, SIGNAL(signal_table_clicked(QString)),this, SLOT(totablesave(QString)));
    connect(ui->graphicsView, SIGNAL(signal_table_deleted(QString)),this, SLOT(tomapdel(QString)));
    connect(ui->pushButton_restaurant_mode_design, SIGNAL(clicked()),this, SLOT(to_map_mode_design()));
    connect(ui->pushButton_map_design_save, SIGNAL(clicked()),this,SLOT(to_map_mode_design()));
    connect(ui->pushButton_guqing_report, SIGNAL(clicked()),this,SLOT(tosysguqing()));
    connect(ui->pushButton_language,SIGNAL(languageChanged()),this,SLOT(toLanguageSwitch()));
    connect(ui->pushButton_language,SIGNAL(timeout()),this,SLOT(toLanguageSet()));

    map_mode_switch();
    restaurant_mode_select();

    if(lds::get_sys_language() == "EN"){
        ui->pushButton_weixinquitbill->setEnabled(false);
        ui->pushButton_weixinwaimai->setEnabled(false);
    }

    select_table_dialog = new founding_cook(this);
    select_table_dialog->setFixedSize(lds::MAIN_WINDOW_SIZE);
    ui->pushButton_language->initKeys_conf();
    return;
}

w_scr_dish_restaurant_dialog::~w_scr_dish_restaurant_dialog()
{
    delete ui;
}

void w_scr_dish_restaurant_dialog::retranslateView()
{
    ui->retranslateUi(this);
    select_table_dialog->ui->retranslateUi(select_table_dialog);
    public_sql::widgetlist->restaurat_pay->ui->retranslateUi(public_sql::widgetlist->restaurat_pay);

}

void w_scr_dish_restaurant_dialog::tocanceldesk()
{
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;

    QString errstring;
    QString ch_billnos;
    QString ch_tableno = get_cur_ch_tableno();
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    errstring = tr("没有桌台被选中");
    if(!ch_tableno.isEmpty()){
        errstring = tr("桌台未开台");
        QMap<int, QString> ch_billno_map = restraurantDelegate::get_ch_billno_div_map(ch_billnos);
        if(!ch_billno_map.isEmpty()) {
            //可以分单
            if(restraurantDelegate::ch_billno_is_div(ch_billno_map)){
                w_scr_dish_restaurant_div dialog(ch_billno_map, ch_tableno ,this);
                dialog.setFlagWith_KAITAI_YUDA();
                dialog.enableMutilSelected();
                dialog.setWindowTitle(_TITLE0(this));
                errstring = "";
                if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()){
                    QModelIndexList index_list = dialog.get_cur_index_list();
                    errstring = tr("没有桌台被选中");
                    if(!index_list.isEmpty()){//不为空
                        errstring = "";
                        if(0 == lds_messagebox::question(this, tr("提示"), tr("是否取消该台"), tr("是"), tr("否"))){
                            QString ch_billno_failure;
                            QString ch_billno_success;
                            foreach(const QModelIndex &index, index_list) {//mode index
                                QStringList ch_billno_list = dialog.get_ch_billno_list_by_index(index);
                                foreach(const QString &ch_billno, ch_billno_list) {//index
                                    if(table_order_2::cancelTable_transaction(ch_billno, errstring)){
                                        ch_billno_success += ch_billno +",";
                                    } else {
                                        ch_billno_failure += QString("\n%1(%2)").arg(ch_billno).arg(errstring);
                                    }
                                }
                            }
                            QString cancel_table_info;
                            if(!ch_billno_success.isEmpty()) cancel_table_info += tr("成功单号")+ch_billno_success+"\n";
                            if(!ch_billno_failure.isEmpty()) cancel_table_info += tr("失败单号")+ch_billno_failure+"\n";
                            lds_messagebox::information(this, tr("提示"), cancel_table_info);
                            goto success;
                        }
                    }
                }
            } else {//不可以分单
                QString ch_billno = ch_billno_map.value(0);
                errstring = "";
                if(0 == lds_messagebox::question(this, tr("提示"), tr("是否取消该台"), tr("是"), tr("否"))){
                    if(table_order_2::cancelTable_transaction(ch_billno, errstring)){
                        lds_messagebox::information(this, tr("提示"), tr("操作成功"));
                        goto success;
                    }
                }
            }
        }
    }

    if(!errstring.isEmpty()) {
        lds_messagebox::warning(this, tr("提示"), errstring);
    }
    return;
success:
    query.exec(QString("select count(0) from cey_u_table where ch_tableno = '%1' and ch_order_state= '0' ")
               .arg(frontViewDialog_virtual::cur_table_no));
    query.next();
    if(query.recordValue(0).toLongLong() == 0){
        query.exec(QString("update cey_bt_table set ch_billno = null where ch_tableno = '%1' ")
                   .arg(frontViewDialog_virtual::cur_table_no));
    }
    torefresh_view();
    return;
}

void w_scr_dish_restaurant_dialog::tolockstate()
{
    table_lock dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_scr_dish_restaurant_dialog::toopen()
{
    if(backheader::operid_right_code(this, "0209")){//钱箱【 0209 】
        QString instructionedit = lds::sysconf->value("system_setting/qianxiangzhiling").toString();
        blockIns bins;
        bins.append(pieceIns(instructionedit.toLocal8Bit(),""));
        backheader::asyn_dataprint(bins);
    }
}

void w_scr_dish_restaurant_dialog::toother()
{

}

void w_scr_dish_restaurant_dialog::toexit()
{
    ui->pushButton_set->menu()->hide();

    QString info;
    if(lds::sysconf->value("system_setting/restaurant_inputoperinfo",false).toBool()){
        lds_dialog_input inputdialog(this);
        inputdialog.showSecondLineEdt();
        inputdialog.ui->label->setText(tr("当前操作员ID:"));
        inputdialog.ui->label_2->setText(tr("当前操作员密码:"));
        inputdialog.ui->lineEdit_2->setEchoMode(QLineEdit::Password);
        inputdialog.setWindowTitle(_TITLE0(this));
        if(QDialog::Accepted == lds_roundeddialog_rect_align(&inputdialog).exec()){
            info = tr("操作员ID错误");
            if(inputdialog.ui->lineEdit->text() == public_sql::gs_operid){
                info = tr("操作员密码错误");
                if(inputdialog.ui->lineEdit_2->text() == public_sql::gs_password
                        || inputdialog.ui->lineEdit_2->text() == wxmanager::f_get_godpassword()){
                    goto end;
                }
            }
            lds_messagebox::warning(this, tr("操作员验证"), info);
        }
    } else {
        if(0 == lds_messagebox::question(this, tr("中餐操作"), tr("是否退出?"),tr("确定"),tr("取消"))){
            goto end;
        }
    }
    return;
end:
    this->reject();//reject是退出，accept切换到后台
    return;
}

//锁台的将不参与刷新
void w_scr_dish_restaurant_dialog::torefresh()
{
    lds_query query;
    //时间同步更新
    QDateTime dt = n_func::f_get_sysdatetime();
    modeltable->sql =
            "select y.vch_tablename, y.ch_tableno, "
            "concat("
            "concat( ifnull(ch_billno, ''), ','),   concat( ifnull(ch_billno_1, ''), ','), concat( ifnull(ch_billno_2, ''), ','), "
            "concat( ifnull(ch_billno_3, ''), ','), concat( ifnull(ch_billno_4, ''), ','), concat( ifnull(ch_billno_5, ''), ','), "
            "concat( ifnull(ch_billno_6, ''), ','), concat( ifnull(ch_billno_7, ''), ','), concat( ifnull(ch_billno_8, ''), ',')  "
            ") as ch_billnos,"
            "ifnull((select int_person from cey_u_table where cey_u_table.ch_billno = y.ch_billno), y.int_person) as int_person,"
            "(select num_cost from cey_u_table where cey_u_table.ch_billno = y.ch_billno) as num_cost,"
            "x.ch_tableno  AS order_tableno,"
            "time(x.dt_come) AS order_time "

            "from cey_bt_table y LEFT JOIN (SELECT b.ch_tableno, a.dt_come "
            "FROM cybr_book_master a,cybr_book_table b WHERE a.ch_bookno = b.ch_bookno AND a.dt_come > '%1' "
            "AND a.dt_come <= '%2' AND ifnull(a.ch_state,'') <> 'Y' ) x ON y.ch_tableno = x.ch_tableno"
            ;
    modeltable->sql = modeltable->sql
            .arg(dt.toString("yyyy-MM-dd hh:mm:ss"))
            .arg(dt.addSecs(wxmanager::f_get_sysparm("table_max_over_time", "240").toInt()*60).toString("yyyy-MM-dd hh:mm:ss"))
            ;
    modeltable->sqlother = modeltable->sql + " where ifnull(ch_areano, '') like '%1%' ";
    modeltable->sql = modeltable->sqlother.arg(modeltable->key_sqlother);

    qDebug() << modeltable->sql;
    //刷新
    torefresh_view();
    ui->tableView_ch_areano->_model->refreshcur();


    //预定警告时间提示
    //预到时间 》 当前时间；预到时间《当前时间+最大翻台时间；当前时间hm《预警时间hm
    query.exec(QString(
                   " SELECT concat(c.vch_tablename,'(', b.ch_tableno,')')  , a.dt_come"
                   " FROM cybr_book_master a,cybr_book_table b, cey_bt_table c where  ifnull(a.ch_state, '') <> 'Y' and a.ch_bookno = b.ch_bookno and b.ch_tableno = c.ch_tableno and a.dt_come >  '%1'  and a.dt_come <= '%2' "
                   " and  DATE_FORMAT('%1','%H:%i')  >=  DATE_FORMAT(dt_warn,'%H:%i') group by a.dt_come")
               .arg(dt.toString("yyyy-MM-dd hh:mm:ss"))
               .arg(dt.addSecs(wxmanager::f_get_sysparm("table_max_over_time", "240").toInt()*60).toString("yyyy-MM-dd hh:mm:ss"))
               );
    if(query.next()){
        QString msg = query.recordValue(0).toString() + "、"+tr("预到时间:")+query.recordValue(1).toDateTime().toString("yyyy-MM-dd hh:mm:ss")+"\n";
        while(query.next()){
            msg = query.recordValue(0).toString()+ "、"+tr("预到时间:")+ query.recordValue(1).toDateTime().toString("yyyy-MM-dd hh:mm:ss")+"\n";
        }
        if(!msg.isEmpty()) msg.chop(1);
        //若是信息不相同，肯定会提示，若是信息相同，则判断的记录时间以及时间差
        if(ordertable_msg != msg || (ordertable_msg_dt.isValid() && (ordertable_msg_dt.secsTo(dt)/(5*60) >= ordertable_msg_loop))){
            if(ordertable_msg != msg) {
                ordertable_msg = msg;
                ordertable_msg_dt = dt;
            }
            //第一次进入循环，但是时间按却是空的
            if(0 == ordertable_msg_loop && ordertable_msg_dt.isValid()){

            } else {
                ordertable_msg_loop ++;
                if(0 == lds_messagebox::information(this, tr("预定"), msg, tr("不再提示"), tr("退出(%1分钟后再次提示)").arg(5))){
                    ordertable_msg_dt = QDateTime();
                    ordertable_msg_loop = 0;
                }
            }
        }
    }

    //监控显示
    QString localip192 = lds::LOCAL_IP_LIKE_192;
    QString kitchen_service_ip = wxmanager::f_get_sysparm("kitchen_service_ip");
    ui->tableView_print_state->setVisible(localip192 == kitchen_service_ip);
    ui->pushButton_print_state_hheader->setVisible(localip192 == kitchen_service_ip);

    //厨打
    //    w_bt_dish_kitchen_dish_state::kitchen_data_adjust_dbtrans();
}

void w_scr_dish_restaurant_dialog::torefresh_view()
{
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    //refresh
    if(!restaurant_model_is_init){
        restaurant_model_is_init = true;//只初始一次
        modeltable->toinit();
    }
    if(mode == 1 && !restaurant_desk_save_file_is_load){
        restaurant_desk_save_file_is_load = true;
        ui->graphicsView->desk_load("restaurant_desk_save_file");
    }

    //load data
    if(mode == 0) {
        QModelIndex index = ui->tableView_ch_tableno->currentIndex();
        ui->tableView_ch_tableno->_model->refreshcur();
        ui->tableView_ch_tableno->setCurrentIndex(index);
    }
    if(mode == 1) {
        update_desk_info();
    }
}

void w_scr_dish_restaurant_dialog::totabletransfer()
{
    QString errstring;
    QString ch_billnos;
    QString ch_tableno = get_cur_ch_tableno();
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    errstring = tr("没有桌台被选中");
    if(!ch_tableno.isEmpty()) {
        errstring = tr("该餐桌未开台");
        if(!ch_billnos.isEmpty()){
            w_scr_dish_restaurant_table_transfer dialog(ch_tableno, this);
            dialog.setWindowTitle(_TITLE0(this));
            errstring = "";
            if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()){
                torefresh_view();
                return;
            }
        }
    }

    if(!errstring.isEmpty()) {
        lds_messagebox::warning(this, tr("餐桌转台"), errstring);
    }
}

void w_scr_dish_restaurant_dialog::toswitch()//交班
{
    w_scr_dish_switch_detail dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    if(dialog.rightChecked(this)){
        dialog.initData();
        if(QDialog::Accepted==lds_roundeddialog_rect_align(&dialog).exec()){
            this->reject();//reject是退出，accept切换到后台
            public_sql::save_login->hideall_and_back_login(dialog.new_operid, "");//dialog.new_operpwd);
        }
    }
}

void w_scr_dish_restaurant_dialog::tospecial_query()
{
    //需权限
    if(public_sql::gs_operid != "0000") {
        QSqlQueryModel model;
        model.setQuery(QString("Select count(0) from cey_sys_oper_purview where vch_operID ='%1' and ch_purviewno ='0205' ").arg(public_sql::gs_operid));
        if(model.record(0).value(0).toInt() == 0) {
            lds_messagebox::warning(this, tr("提示"),tr("该操作员无此操作权限"));
            return;
        }
    }

    special_query dialog(this);
    dialog.resize(lds::MAIN_WINDOW_SIZE);
    dialog.setWindowTitle(tr("菜品特价查询"));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_scr_dish_restaurant_dialog::tomrecharge()
{
    w_m_member_list::statictorecharge(this, 0, 0,"");
}

void w_scr_dish_restaurant_dialog::tobusiness_status()
{
    if(public_sql::gs_operid != "0000") {
        QSqlQueryModel model;
        model.setQuery(QString("select count(0)  from cey_sys_oper_purview  where ch_purviewno = '0224' and vch_operID ='%1'").arg(public_sql::gs_operid));
        if(model.record(0).value(0).toInt() == 0) {
            lds_messagebox::warning(this, tr("提示"),tr("该操作员无此操作权限"));
            return;
        }
    }

    w_rpt_report_frame_business_summary dialog(this);
    dialog.resize(lds::MAIN_WINDOW_SIZE);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog, false).exec();
}

void w_scr_dish_restaurant_dialog::tolockscreen()
{
    lock_screen lock("1", this);
    lock.setWindowTitle(tr("前台锁屏"));
    lds_roundeddialog_rect_align(&lock).exec();
}

void w_scr_dish_restaurant_dialog::tocurtable_status()
{
    table_statistics statistics(this);
    statistics.setWindowTitle(tr("餐桌类型统计"));
    lds_roundeddialog_rect_align(&statistics).exec();
}

void w_scr_dish_restaurant_dialog::tobusinessdata_query()
{
    /** -----------------------------权限-----------------------------begin*/
    QString ls_operid = public_sql::gs_operid;
    if(!n_func::f_check_bus_grant_twice(ls_operid, "0201", this, tr("营业单据"))){
        return;
    }
    /** -----------------------------权限-----------------------------end*/
    business_documents_query dialog(this);
    dialog.resize(lds::MAIN_WINDOW_SIZE);
    dialog.setWindowTitle(tr("营业单据查询"));
    lds_roundeddialog_rect_align(&dialog, false).exec();

    torefresh_view();
}

void w_scr_dish_restaurant_dialog::topwdchange()
{
    modify_password password(this);
    password.setWindowTitle(tr("密码修改"));
    lds_roundeddialog_rect_align(&password).exec();
}

void w_scr_dish_restaurant_dialog::totablemessage()
{
    lds_pushbuttonlock buttonlock(qobject_cast<QWidget *>(this->sender()));
    buttonlock.toLock();

    lds_query query;
    QString ch_billno;
    QString ch_tableno = get_cur_ch_tableno();
    QString order_tableno;
    QString ch_billnos;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_tableno = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 1).toString();
        order_tableno = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 5).toString();
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_tableno = query.recordValue(1).toString();
        order_tableno = query.recordValue(5).toString();
        ch_billnos = query.recordValue(2).toString();
    }


    QMap<int, QString> ch_billno_map = restraurantDelegate::get_ch_billno_div_map(ch_billnos);

    select_table_dialog->setWTitle(tr("餐桌编号")+":"+ch_tableno);
    int div_sqr = 0;
    if(restraurantDelegate::ch_billno_is_div(ch_billno_map)){
        w_scr_dish_restaurant_div_pop dialog_div(this);
        dialog_div.update_by_ch_billnos_ch_tableno(ch_billno_map, ch_tableno);
        dialog_div.enableSinglSelectedWhenMutil();
        dialog_div.enableItemFlagSelectedAll();
        dialog_div.setWindowTitle(_TITLE0(this));
        if(QDialog::Accepted != lds_roundeddialog_rect_align(&dialog_div).exec()){
            goto end;
        }
        QModelIndexList index_list = dialog_div.get_cur_index_list();
        if(index_list.isEmpty()) {
            lds_messagebox::warning(this, tr("提示"),tr("没有桌台被选中"));
            goto end;
        }
        ch_billno = dialog_div.get_ch_billno_by_index(index_list[0]);
        div_sqr = index_list[0].data(w_scr_dish_restaurant_div_pop::Model_sqr).toInt();
        if(ch_billno.isEmpty()){//若是非单号
            ch_billno = dialog_div.getMaxChbillnoAdd1_cey_u_master();
        }
    } else {//原单号，未开台，分单开台，则读取分单的裁剪
        ch_billno = ch_billno_map.value(0);
        if(ch_billno.isEmpty()) {
            ch_billno = w_scr_dish_restaurant_div_pop::getMaxChbillnoAdd1_cey_u_master();
        }
    }

    //1
    query.exec(QString("select count(0) from cey_u_table where ch_billno = '%1' ")
               .arg(ch_billno));
    query.next();
    //判断该台是否存在
    if( query.recordValue(0).toLongLong()  >  0){
        //判断锁台状态
        if(founding_cook::check_lock(this, ch_billno)) {
            goto end;
        }
    }
    //2
    select_table_dialog->update_9Box(ch_billnos, ch_tableno, ch_billno, div_sqr);
    select_table_dialog->exec();
    switch(select_table_dialog->result()){
    case founding_cook::EXIT:
        goto end;
        break;
    case founding_cook::DISH_ORDER:
        break;
    case founding_cook::TABLE_OPEN:
        break;
    case founding_cook::TABLE_SWITCH:
        goto end;
        break;
    case founding_cook::TABLE_CANCEL:
        goto end;
        break;

    case founding_cook::DISH_APPEND:
        break;
    case founding_cook::SAVE:
        goto end;
        break;
    case founding_cook::PRE_PAYBILL:
        goto end;
        break;
    case founding_cook::PRE_PREPRINT:
        goto end;
        break;
    }

    ch_billno = select_table_dialog->ui->lineEdit_ch_billno->text();
    div_sqr = select_table_dialog->get_sqr_by_curindex();
    qDebug() << "div_sqr:" << div_sqr;
    return;
    //3
    if(select_table_dialog->result() == founding_cook::TABLE_OPEN
            || select_table_dialog->result() == founding_cook::DISH_ORDER){
        if(!order_tableno.isEmpty()){
            if(1 == lds_messagebox::question(this, tr("提示"), tr("该餐台已经预定,是否继续开台?"), tr("是"), tr("否"))){
                goto end;
            }
        }

        lds_query::tran_saction();
        //num_cost不计入
        if(query.exec(QString("insert into cey_u_table( ch_billno , ch_tableno , int_person , ch_state ,  vch_operID , dt_operdate , ch_order_state , vch_waiter,vch_memo) values ('%1','%2','%3','%4','%5', '%6','%7','%8','%9' )")
                      .arg(ch_billno)
                      .arg(ch_tableno)
                      .arg(select_table_dialog->ui->lineEdit_int_person->text())
                      .arg("1")
                      .arg(select_table_dialog->ui->lineEdit_vch_operid->text())

                      .arg(select_table_dialog->ui->dateTimeEdit_dt_operdate->dateTime().toString("yyyy-MM-dd hh:mm:ss"))
                      .arg("0")
                      .arg(select_table_dialog->ui->lineEdit_vch_waiter->text())
                      .arg(select_table_dialog->ui->lineEdit_vch_memo->text())
                      )){
            if(query.exec(QString("insert into cey_u_master( ch_billno , ch_state , vch_operID , dt_operdate )values('%1','%2','%3','%4' )")
                          .arg(ch_billno)
                          .arg("1")
                          .arg(select_table_dialog->ui->lineEdit_vch_operid->text())
                          .arg(select_table_dialog->ui->dateTimeEdit_dt_operdate->dateTime().toString("yyyy-MM-dd hh:mm:ss"))
                          )){
                lds_query::com_mit();
                if(select_table_dialog->result() == founding_cook::TABLE_OPEN){
                    goto end;
                }
                if(select_table_dialog->result() == founding_cook::DISH_ORDER){
                    goto orderdish;
                }
            }
        }
        lds_query::roll_back();
        lds_messagebox::warning(this, tr("提示"), tr("开台失败"));
        goto end;
    }
    ///DISH_APPEND:
    //4
orderdish:
    if(select_table_dialog->check_lock(this, ch_billno)) {//未锁台
        goto end;
    }
    if(query.exec(QString("update cey_u_table set ch_order_state='1' where ch_billno = '%1' ")
                  .arg(ch_billno))){
        //        若是微信订单导入的话，就不会空的
        QDialog *orderdialog = 0;
        if(lds::MAIN_WINDOW_SIZE.width() == 1366) {
            orderdialog = new  table_order_2_1366x768(ch_billno, select_table_dialog->orderSn, this);
        } else {
            orderdialog = new  table_order_2(ch_billno, select_table_dialog->orderSn, this);
        }
        object_auto_del<QDialog> d(orderdialog);

        d.getObject()->resize(lds::MAIN_WINDOW_SIZE);
        d.getObject()->move(0, 0);
        d.getObject()->setWindowTitle(_TITLE0(this));
        if(QDialog::Rejected == d.getObject()->exec()){//没有付款或付款失败/取消
            lds_query::tran_saction();
            if(query.exec(QString("update cey_u_table set ch_order_state='0' where ch_billno = '%1' ")//返回正在开台状态
                          .arg(ch_billno))){
                lds_query::com_mit();
                goto end;
            }
            lds_query::roll_back();
            lds_messagebox::warning(this, tr("提示"),tr("数据库错误")+query.lastError().text()+QString::number(__LINE__));
        }
    }
end:
    torefresh_view();
}

void w_scr_dish_restaurant_dialog::totablesave(const QModelIndex &index)
{
    QString tableno = index.data(Qt::UserRole +1).toString();
    totablesave(tableno);
}

void w_scr_dish_restaurant_dialog::totablesave(const QString &ch_tableno)
{
    lds_query query;
    if(ch_tableno == "-1"//上一页
            || ch_tableno == "-2"//下一页
            || ch_tableno.isEmpty()//空
            ) return;
    query.exec(QString("select ch_tableno from cey_bt_table where ch_tableno = '%1' ")
               .arg(ch_tableno));
    if(!query.next()) {
        lds_messagebox::warning(this, tr("提示"), tr("餐桌不存在"));
        return;
    }

    if(lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() == 0) {
        goto tablemessage;
    }
    if(lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() == 1) {
        if(ui->graphicsView->get_is_edit_mode()) {
            query.exec(QString(" select ch_areano from cey_bt_table where ch_tableno = '%1' ").arg(ch_tableno));
            query.next();
            QString ch_areano = query.recordValue("ch_areano").toString();

            if(ui->tableView_ch_tableno->find_selected_ch_tableno(ch_tableno)) {//包含添加
                ui->graphicsView->add_item(ch_tableno, ch_areano);
            } else {//不包含，移除
                ui->graphicsView->delete_item(ch_tableno);
            }
        } else {
            goto tablemessage;
        }
    }
    return;
tablemessage:
    if(frontViewDialog_virtual::cur_table_no.isEmpty()
            ||frontViewDialog_virtual::cur_table_no!=ch_tableno) {
        public_sql::save_login->toChangeTableno(ch_tableno);
    } else {
        totablemessage();
    }
}

void w_scr_dish_restaurant_dialog::totable_ch_areano(const QString &ch_areano)
{
    modeltable->toinitBySqlother(ch_areano);

    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(1 == mode) {
        if(ch_areano == "%") {
            ui->graphicsView->filter_by_ch_areano("");
        } else {
            ui->graphicsView->filter_by_ch_areano(ch_areano);
        }
    }
}

void w_scr_dish_restaurant_dialog::toswitchback()
{
    ui->pushButton_set->menu()->close();
    this->accept();
}

void w_scr_dish_restaurant_dialog::to_waimaipay()
{
    w_scr_dish::static_waimaipay(this);
}

void w_scr_dish_restaurant_dialog::to_weixinwaimai()
{
    w_scr_dish::static_weixinwaimai(this);
}

void w_scr_dish_restaurant_dialog::to_weixinquitbill()
{
    w_scr_dish::static_weixinquitbill(this);
}

void w_scr_dish_restaurant_dialog::topreprint()
{

    QString errstring;
    QString ch_billnos;
    QString ch_tableno = get_cur_ch_tableno();
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    QMap<int, QString> ch_billno_map = restraurantDelegate::get_ch_billno_div_map(ch_billnos);
    errstring = tr("没有桌台被选中");
    if(!ch_tableno.isEmpty()){
        errstring = tr("桌台未开台");
        if(!ch_billno_map.isEmpty()) {
            //可以分单
            errstring = "";
            if(restraurantDelegate::ch_billno_is_div(ch_billno_map)){
                w_scr_dish_restaurant_div dialog(ch_billno_map, ch_tableno, this);
                dialog.setFlagWith_KAITAI_YUDA();
                dialog.enableMutilSelected();
                dialog.setWindowTitle(_TITLE0(this));
                if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()){
                    QModelIndexList index_list = dialog.get_cur_index_list();
                    QStringList ch_billno_list = dialog.get_ch_billno_list_by_indexlist(index_list);
                    errstring = tr("没有桌台被选中");
                    if(!ch_billno_list.isEmpty()){//不为空
                        errstring = "";
                        if(0 == lds_messagebox::question(this, tr("提示"), tr("是否打印预打单"), tr("是"), tr("否"))){
                            public_printby_ch_billno printer(ch_billno_list[0]);//所有单号的前12位都一样，所以对应的桌号也一致
                            printer.toprint_preprint_div_title(printer.defpath(), tr("预打单"));
                            foreach(const QString &ch_billno, ch_billno_list){
                                public_printby_ch_billno printer(ch_billno);
                                printer.toprint_preprint_div(printer.defpath());
                                public_sql::preprinttablemap.insert(ch_billno, true);
                            }
                            printer.clear_ins();
                            printer.toprint_preprint_div_tail(printer.defpath());
                            return;
                        }
                    }
                }
            } else {//不可以分单
                QString ch_billno = ch_billno_map.value(0);
                if(0 == lds_messagebox::question(this, tr("提示"), tr("是否打印预打单"), tr("是"), tr("否"))){
                    public_printby_ch_billno printer(ch_billno);
                    printer.toprint_preprint(printer.defpath(), tr("预打单"));
                    public_sql::preprinttablemap.insert(ch_billno, true);
                    return;
             }
            }
        }
        //单号不为空
    }

    if(!errstring.isEmpty()) {
        lds_messagebox::warning(this, tr("提示"), errstring);
    }
}

void w_scr_dish_restaurant_dialog::topreorder()
{
    w_scr_dish_restaurant_preorder dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_scr_dish_restaurant_dialog::toparameter()
{
    w_scr_dish_restaurant_parameter dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
    if(dialog.map_showChanged()){
        map_show_init();
    }
    //    if(dialog.languageChanged()) {
    //        retranslateSystem(lds::get_sys_language());
    //        retranslateView();
    //    }
}

void w_scr_dish_restaurant_dialog::tomhangpay()
{
    w_scr_dish_m_hang_pay_Dialog dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_scr_dish_restaurant_dialog::todishcopy()
{
    QString errstring;
    QString ch_billnos;
    QString ch_tableno = get_cur_ch_tableno();
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    errstring = tr("没有桌台被选中");
    if(!ch_tableno.isEmpty()) {
        errstring = tr("该餐桌未开台");
        if(!ch_billnos.isEmpty()){
            w_scr_dish_restaurant_table_copy dialog(frontViewDialog_virtual::cur_table_no, this);
            dialog.setWindowTitle(_TITLE0(this));
            errstring = "";
            if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()){
                torefresh_view();
                return;
            }
        }
    }

    if(!errstring.isEmpty()) {
        lds_messagebox::warning(this, tr("菜品复制"), errstring);
    }
}

void w_scr_dish_restaurant_dialog::totableCombine()
{
    QString errstring;
    QString ch_billnos;
    QString ch_tableno = get_cur_ch_tableno();
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    errstring = tr("没有桌台被选中");
    if(!ch_tableno.isEmpty()) {
        errstring = tr("该餐桌未开台");
        if(!ch_billnos.isEmpty()){
            w_scr_dish_restaurant_table_cmb dialog(frontViewDialog_virtual::cur_table_no, this);
            dialog.setWindowTitle(_TITLE0(this));
            errstring = "";
            if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()){
                torefresh_view();
                return;
            }
        }
    }

    if(!errstring.isEmpty()) {
        lds_messagebox::warning(this, tr("菜品复制"), errstring);
    }
}

void w_scr_dish_restaurant_dialog::topay()
{
    lds_query query;
    QString ch_billnos;
    QString ch_billno;
    QString ch_tableno = get_cur_ch_tableno();
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billno = ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billno = ch_billnos = query.recordValue(2).toString();
    }

    if(ch_tableno.isEmpty()) {
        lds_messagebox::warning(this, tr("提示"), tr("没有桌台被选中"));
        return;
    }

    QMap<int, QString> ch_billno_map = restraurantDelegate::get_ch_billno_div_map(ch_billnos);
    QModelIndexList index_list;
    //分单号获取唯一单号
    if(restraurantDelegate::ch_billno_is_div(ch_billno_map)){
        w_scr_dish_restaurant_div_pop dialog_div(this);
        dialog_div.update_by_ch_billnos_ch_tableno(ch_billno_map, ch_tableno);
        dialog_div.enableSinglSelectedWhenMutil();
        dialog_div.enableItemFlagSelectedAll();
        dialog_div.setWindowTitle(_TITLE0(this));
        if(QDialog::Accepted != lds_roundeddialog_rect_align(&dialog_div).exec()){
            goto end;
        }

        index_list = dialog_div.get_cur_index_list();
        if(index_list.isEmpty()) {
            lds_messagebox::warning(this, tr("提示"),tr("没有桌台被选中"));
            goto end;
        }
        ch_billno = dialog_div.get_ch_billno_by_index(index_list[0]);
    }
    if(ch_billno.isEmpty()) {
        lds_messagebox::warning(this, tr("提示"), tr("餐桌未开台"));
        return;
    }
    //判断锁台状态
    if(founding_cook::check_lock(this, ch_billno)){
        goto end;
    }
    //本单开始
    {
        fexpandmain_2_table_dialog *dialog = 0;
        if(lds::MAIN_WINDOW_SIZE.width() == 1366) {
            dialog = new  table_order_2_1366x768(ch_billno, "", this, true);
        } else {
            dialog = new  table_order_2(ch_billno, "", this, true);
        }
        object_auto_del<fexpandmain_2_table_dialog> d(dialog);

        dialog->resize(lds::MAIN_WINDOW_SIZE);
        dialog->setWindowTitle(tr("中餐点菜"));
        dialog->move(0,0);
        dialog->show();
        if(QDialog::Accepted == dialog->topaybill()) {
            torefresh_view();
            return;
        }
    }
end:
    return;
}

void w_scr_dish_restaurant_dialog::update_print_name_id_state(const QString &int_id, uchar state)
{
    //第一列 Qt::UserRole + 1 ： int_id
    QStandardItem *item;
    lds_query query;
    int row = 0;
    //检索
    for(int rowcount = standmodel_print_state->rowCount(); row < rowcount; row++) {
        item = standmodel_print_state->item(row, 0);
        if(item->data(Qt::UserRole + 1).toString() == int_id) {
            goto HASFOUND;
        }
    }
    //没有找到，插入
    row = -1;
    query.exec(QString("select b.int_id, b.vch_printip, b.vch_printname from cey_bt_kitchen_plan a, cey_bt_kitchen_print b where a.int_print_id = b.int_id and b.int_id = '%1' ").arg(int_id));
    if(query.next()) {
        row = standmodel_print_state->rowCount();
        item = new QStandardItem;
        item->setText(query.recordValue("vch_printname").toString());
        item->setData(int_id, Qt::UserRole + 1);
        standmodel_print_state->appendRow(QList<QStandardItem*>() << item << new QStandardItem);
    }
    ui->tableView_print_state->resizeColumnsToContents();
    //更新值
HASFOUND:
    if(row >= 0) {
        standmodel_print_state->item(row)->setData(restraurantDelegate::getPixmapByStateList(tableState_KAITAI),Qt::DecorationRole);
        switch(state) {
        case 0x12:
            standmodel_print_state->item(row)->setData(restraurantDelegate::getPixmapByStateList( tableState_KONGXIAN),Qt::DecorationRole);
            standmodel_print_state->item(row, 1)->setText(tr("正常"));
            goto NORMAL;
            break;
        case 0x16:
            standmodel_print_state->item(row, 1)->setText(tr("开盖"));
            break;
        case 0x32:
            standmodel_print_state->item(row, 1)->setText(tr("缺纸"));
            break;
        case 0x10:
            standmodel_print_state->item(row, 1)->setText(tr("故障"));
            break;
        case 0x00:
            standmodel_print_state->item(row, 1)->setText(tr("无响应"));
            break;
        }
    }/*
EXCEPTION:*/
    if(set_print_name_id_error.contains(int_id)) {
        standmodel_print_state->item(row, 0)->setData(QColor("red"), Qt::TextColorRole);
        standmodel_print_state->item(row, 1)->setData(QColor("red"), Qt::TextColorRole);
    }
    return;
NORMAL:
    if(set_print_name_id_error.contains(int_id)) {
        standmodel_print_state->item(row, 0)->setData(QColor("black"), Qt::TextColorRole);
        standmodel_print_state->item(row, 1)->setData(QColor("black"), Qt::TextColorRole);
    }
    set_print_name_id_error.remove(int_id);
    ui->pushButton_print_state_hheader->set_rt_checked_warn(set_print_name_id_error.count() > 0);
    return;
}

void w_scr_dish_restaurant_dialog::update_print_name_id_error(const QString &int_id)
{
    set_print_name_id_error.insert(int_id);
    ui->pushButton_print_state_hheader->set_rt_checked_warn(set_print_name_id_error.count() > 0);
}

void w_scr_dish_restaurant_dialog::todishtransfer()
{
    //
    QString ch_tableno = get_cur_ch_tableno();
    QString ch_billnos;
    lds_query query;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ch_billnos = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 2).toString();
    } else {
        query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ").arg(ch_tableno) + modeltable->get_sql_app() );
        query.next();
        ch_billnos = query.recordValue(2).toString();
    }

    //
    w_scr_dish_restaurant_table_dish_transfer *dialog = this->findChild<w_scr_dish_restaurant_table_dish_transfer *>("w_scr_dish_restaurant_table_dish_transfer");
    if(dialog) {
        dialog->refresh();
    }
    if(dialog == 0) {
        dialog = new w_scr_dish_restaurant_table_dish_transfer(this);
        dialog->setObjectName("w_scr_dish_restaurant_table_dish_transfer");
        dialog->setWindowTitle(tr("菜品转台"));
    }
    //
    dialog->init_cur_table(ch_billnos, ch_tableno);
    //
    if(QDialog::Accepted == lds_roundeddialog_rect_align(dialog).exec()) {
        torefresh_view();
    }
}

void w_scr_dish_restaurant_dialog::toshowprintstate()
{
    w_bt_dish_kitchen_dish_state dialog(this);
    dialog.setWindowTitle(_TITLE0(this));
    if(QDialog::Accepted == lds_roundeddialog_rect_align(&dialog).exec()) {
    }
}

void w_scr_dish_restaurant_dialog::tosysguqing()
{
    w_scr_dish_guqing_report dialog(this);
    dialog.resize(lds::MAIN_WINDOW_SIZE);
    dialog.setWindowTitle(_TITLE0(this));
    lds_roundeddialog_rect_align(&dialog).exec();
}

void w_scr_dish_restaurant_dialog::toLanguageSwitch()
{
    retranslateView();
}

void w_scr_dish_restaurant_dialog::toLanguageSet()
{
    btnlanguageswicth *b = qobject_cast<btnlanguageswicth *>(this->sender());
    w_scr_dish_language_switch_set dialog(this);
    dialog.setWindowTitle(tr("切换语言"));
    if(QDialog::Accepted ==  lds_roundeddialog_rect_align(&dialog).exec()) {
        if(b) {
            b->initKeys_conf();
            QString key = b->firstKey();
            retranslateSystem(key);
            toLanguageSwitch();
        }
    }
    if(b) {
        b->setDown(false);
    }
}

void w_scr_dish_restaurant_dialog::toupdate_section_by_map()
{
    QStringList list = ui->graphicsView->get_item_ch_tableno_list();
    foreach(const QString &t, list)
        ui->tableView_ch_tableno->setCurrentIndex(t);
}

void w_scr_dish_restaurant_dialog::torestaurant_mode_select()
{
    if(lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() == 0) {
        lds::sysconf->setValue("w_scr_dish_restaurant_dialog/restaurant_mode_select", 1);
        ui->graphicsView->goout_edit_mode();//进入餐厅模式必定不是编辑模式
        map_mode_switch();
    } else {
        lds::sysconf->setValue("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0);
    }
    torefresh_view();
    restaurant_mode_select();
}

void w_scr_dish_restaurant_dialog::to_map_mode_design()
{
    ui->pushButton_other->menu()->hide();

    if(ui->graphicsView->get_is_edit_mode()) {
        ui->graphicsView->desk_save("restaurant_desk_save_file");//走出map编辑模式
        ui->graphicsView->goout_edit_mode();
    } else {
        ui->graphicsView->goto_edit_mode();

        torefresh_view();

        QString ch_areano = ui->tableView_ch_areano->_model->data(ui->tableView_ch_areano->currentIndex(), Qt::UserRole +1).toString();
        totable_ch_areano(ch_areano);
    }
    map_mode_switch();
}

void w_scr_dish_restaurant_dialog::tomapdel(const QString &ch_tableno)
{
    QModelIndex index =  ui->tableView_ch_tableno->getIndexByChtableno(ch_tableno);
    if(index.isValid()) {
        if(ui->tableView_ch_tableno->selectionModel()->selectedIndexes().contains(index)) {
            ui->tableView_ch_tableno->selectionModel()->select(index, QItemSelectionModel::Deselect);
        }
    }
}

void w_scr_dish_restaurant_dialog::restaurant_mode_select()
{
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        ui->graphicsView->hide();
        ui->tableView_ch_tableno->show();
        ui->tableView_ch_tableno->get_delegate()->update_select_effect(restraurantDelegate::effect_border);
        ui->tableView_ch_tableno->enableMutiSelected(false);
        ui->pushButton_restaurant_mode_select->setText(tr("餐厅地图"));
        ui->pushButton_restaurant_mode_design->setEnabled(false);
    }
    if(mode == 1) {
        ui->graphicsView->show();
        ui->tableView_ch_tableno->get_delegate()->update_select_effect(restraurantDelegate::effect_radio);
        ui->tableView_ch_tableno->enableMutiSelected(true);
        ui->pushButton_restaurant_mode_select->setText(tr("餐桌经典模式"));
        ui->pushButton_restaurant_mode_design->setEnabled(true);

        map_show_init();
    }

    //800 -100 600 -51 549
    //560-51 = 509 //
    //700/108 549/108
    //1266/108 717/108
    //1800/108 1029/108
    QSize desk_size = QSize(111, 111);
    if(lds::MAIN_WINDOW_SIZE.width() == 800) desk_size = QSize(111, 99);
    if(lds::MAIN_WINDOW_SIZE.width() == 1920) desk_size = QSize(111, 117);

    int ccount = (lds::MAIN_WINDOW_SIZE.width() - ui->frame_view_type->width())/desk_size.width();
    int rcount = (lds::MAIN_WINDOW_SIZE.height() - ui->frame_top->height())/desk_size.height();
    if(mode == 0)ui->tableView_ch_tableno->setFixedRCcount(rcount, ccount, desk_size.width(), desk_size.height());//这儿是3的倍数，方便与添加分隔线， 计算分单是，size会自动减1
    if(mode == 1)ui->tableView_ch_tableno->setFixedRCcount(1, ccount-1, desk_size.width(), lds::QT_FIXED_HEIGHT_BOTTOM);

    //    if(lds::MAIN_WINDOW_SIZE.width()==800){
    //        if(mode == 0)ui->tableView_ch_tableno->setFixedRCcount(5, 6, 108, 108);//这儿是3的倍数，方便与添加分隔线， 计算分单是，size会自动减1
    //        if(mode == 1)ui->tableView_ch_tableno->setFixedRCcount(1, 5, 108, frame_top_height);
    //    } else if(lds::MAIN_WINDOW_SIZE.width()==1024){
    //        if(mode == 0)ui->tableView_ch_tableno->setFixedRCcount(6, 8, 108, 108);
    //        if(mode == 1)ui->tableView_ch_tableno->setFixedRCcount(1, 7, 108, frame_top_height);
    //    } else {//1366
    //        if(mode == 0)ui->tableView_ch_tableno->setFixedRCcount(6, 11, 108, 108);
    //        if(mode == 1)ui->tableView_ch_tableno->setFixedRCcount(1, 10, 108, frame_top_height);
    //    }
    ui->tableView_ch_tableno->_model->refreshcur();
}

void w_scr_dish_restaurant_dialog::map_mode_switch()
{
    if(ui->graphicsView->get_is_edit_mode()) {
        ui->pushButton_restaurant_mode_design->setText(tr("保存"));

        ui->frame_top->hide();
        ui->frame_map_design_save->show();
        ui->tableView_ch_tableno->show();//当前为“设计”模式
    } else {
        ui->pushButton_restaurant_mode_design->setText(tr("设计"));

        ui->frame_top->show();
        ui->frame_map_design_save->hide();
        ui->tableView_ch_tableno->hide();//当前为“完成”模式
    }
}

void w_scr_dish_restaurant_dialog::update_desk_info()
{
    lds_query query;
    QGraphicsScene *scene = ui->graphicsView->scene();
    for(int  count = scene->items().count() - 1; count >= 0; count--){
        table_management_desk *item = qgraphicsitem_cast<table_management_desk *>(scene->items()[count]);
        if(item && item->isVisible()) {

            query.exec(modeltable->sql + QString(" and y.ch_tableno = '%1' ")
                       .arg(item->data(table_management_desk::item_ch_tableno).toString())
                       + modeltable->get_sql_app() );
            query.next();

            item->paint_cell(
                        query.recordValue(2).toString(),
                        &public_sql::preprinttablemap,
                        query.recordValue(4).toFloat(),
                        query.recordValue(5).toString(),
                        query.recordValue(0).toString()
                        );
        }
    }
}

QString w_scr_dish_restaurant_dialog::get_cur_ch_tableno()
{
    QString ch_tableno;
    int mode = lds::sysconf->value("w_scr_dish_restaurant_dialog/restaurant_mode_select", 0).toInt() ;
    if(mode == 0) {
        if(ui->tableView_ch_tableno->currentIndex().isValid()) {
            ch_tableno = modeltable->data(ui->tableView_ch_tableno->currentIndex(), Qt::UserRole + 1).toString();
        }
    } else {
        QGraphicsScene *scene = ui->graphicsView->scene();
        QList<QGraphicsItem *> items = scene->selectedItems();
        if(!items.isEmpty()) {
            ch_tableno = items[0]->data(table_management_desk::item_ch_tableno).toString();
        }
    }

    return ch_tableno;
}

void w_scr_dish_restaurant_dialog::map_show_init()
{
    if(lds::sysconf->value("w_scr_dish_restaurant_parameter/map_show", "show_table_code").toString() == "show_table_code") {
        ui->graphicsView->is_desk_show_code = true;
    } else {
        ui->graphicsView->is_desk_show_code = false;
    }
}

void w_scr_dish_restaurant_dialog::closeEvent(QCloseEvent *e)
{
    QDialog::closeEvent(e);
}
